{
  "version": 3,
  "sources": ["../node_modules/react/cjs/react.production.min.js", "../node_modules/react/index.js", "../node_modules/react/cjs/react-jsx-runtime.production.min.js", "../node_modules/react/jsx-runtime.js", "../src/core/index.tsx", "../node_modules/mz-math/src/main/format.ts", "../node_modules/mz-math/src/main/other.ts", "../node_modules/mz-math/src/main/angle.ts", "../node_modules/mz-math/src/main/linear-algebra/vector.ts", "../node_modules/mz-math/src/main/linear-algebra/matrix.ts", "../node_modules/mz-math/src/main/linear-algebra/matrix-transformations.ts", "../node_modules/mz-math/src/main/random.ts", "../node_modules/mz-math/src/main/convert.ts", "../node_modules/mz-math/src/main/derivative.ts", "../node_modules/mz-math/src/main/equations/linear-equations.ts", "../node_modules/mz-math/src/main/equations/quadratic-equations.ts", "../node_modules/mz-math/src/main/bezier-curves/bezier-curve.ts", "../node_modules/mz-math/src/main/path-movement.ts", "../node_modules/mz-math/src/main/color.ts", "../node_modules/mz-math/src/main/id.ts", "../node_modules/mz-math/src/main/collision-detection.ts", "../node_modules/mz-math/src/main/animation.ts", "../node_modules/mz-math/src/main/circle-ellipse.ts", "../src/core/domain/svg-provider.ts", "../src/core/domain/defaults-provider.ts", "../src/core/domain/common-provider.ts", "../src/core/domain/circle-provider.ts", "../src/core/domain/pointers-provider.ts", "../src/core/ui/Pointer.tsx", "../src/core/domain/style-provider.ts", "../src/core/ui/Pointers.tsx", "../src/core/domain/data-provider.ts", "../src/core/ui/Connection.tsx", "../src/core/domain/connection-provider.ts", "../src/core/domain/animation-provider.ts", "../src/core/ui/Text.tsx", "../src/core/ui/Ticks.tsx", "../src/core/domain/ticks-provider.ts", "../src/core/ui/Circle.tsx", "../src/core/ui/InnerCircle.tsx"],
  "sourcesContent": ["/**\n * @license React\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var l=Symbol.for(\"react.element\"),n=Symbol.for(\"react.portal\"),p=Symbol.for(\"react.fragment\"),q=Symbol.for(\"react.strict_mode\"),r=Symbol.for(\"react.profiler\"),t=Symbol.for(\"react.provider\"),u=Symbol.for(\"react.context\"),v=Symbol.for(\"react.forward_ref\"),w=Symbol.for(\"react.suspense\"),x=Symbol.for(\"react.memo\"),y=Symbol.for(\"react.lazy\"),z=Symbol.iterator;function A(a){if(null===a||\"object\"!==typeof a)return null;a=z&&a[z]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}\nvar B={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},C=Object.assign,D={};function E(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}E.prototype.isReactComponent={};\nE.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");this.updater.enqueueSetState(this,a,b,\"setState\")};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};function F(){}F.prototype=E.prototype;function G(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}var H=G.prototype=new F;\nH.constructor=G;C(H,E.prototype);H.isPureReactComponent=!0;var I=Array.isArray,J=Object.prototype.hasOwnProperty,K={current:null},L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,e){var d,c={},k=null,h=null;if(null!=b)for(d in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=\"\"+b.key),b)J.call(b,d)&&!L.hasOwnProperty(d)&&(c[d]=b[d]);var g=arguments.length-2;if(1===g)c.children=e;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];c.children=f}if(a&&a.defaultProps)for(d in g=a.defaultProps,g)void 0===c[d]&&(c[d]=g[d]);return{$$typeof:l,type:a,key:k,ref:h,props:c,_owner:K.current}}\nfunction N(a,b){return{$$typeof:l,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===l}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+a.replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g;function Q(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(\"\"+a.key):b.toString(36)}\nfunction R(a,b,e,d,c){var k=typeof a;if(\"undefined\"===k||\"boolean\"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case \"string\":case \"number\":h=!0;break;case \"object\":switch(a.$$typeof){case l:case n:h=!0}}if(h)return h=a,c=c(h),a=\"\"===d?\".\"+Q(h,0):d,I(c)?(e=\"\",null!=a&&(e=a.replace(P,\"$&/\")+\"/\"),R(c,b,e,\"\",function(a){return a})):null!=c&&(O(c)&&(c=N(c,e+(!c.key||h&&h.key===c.key?\"\":(\"\"+c.key).replace(P,\"$&/\")+\"/\")+a)),b.push(c)),1;h=0;d=\"\"===d?\".\":d+\":\";if(I(a))for(var g=0;g<a.length;g++){k=\na[g];var f=d+Q(k,g);h+=R(k,b,e,f,c)}else if(f=A(a),\"function\"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=d+Q(k,g++),h+=R(k,b,e,f,c);else if(\"object\"===k)throw b=String(a),Error(\"Objects are not valid as a React child (found: \"+(\"[object Object]\"===b?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":b)+\"). If you meant to render a collection of children, use an array instead.\");return h}\nfunction S(a,b,e){if(null==a)return a;var d=[],c=0;R(a,d,\"\",\"\",function(a){return b.call(e,a,c++)});return d}function T(a){if(-1===a._status){var b=a._result;b=b();b.then(function(b){if(0===a._status||-1===a._status)a._status=1,a._result=b},function(b){if(0===a._status||-1===a._status)a._status=2,a._result=b});-1===a._status&&(a._status=0,a._result=b)}if(1===a._status)return a._result.default;throw a._result;}\nvar U={current:null},V={transition:null},W={ReactCurrentDispatcher:U,ReactCurrentBatchConfig:V,ReactCurrentOwner:K};exports.Children={map:S,forEach:function(a,b,e){S(a,function(){b.apply(this,arguments)},e)},count:function(a){var b=0;S(a,function(){b++});return b},toArray:function(a){return S(a,function(a){return a})||[]},only:function(a){if(!O(a))throw Error(\"React.Children.only expected to receive a single React element child.\");return a}};exports.Component=E;exports.Fragment=p;\nexports.Profiler=r;exports.PureComponent=G;exports.StrictMode=q;exports.Suspense=w;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W;\nexports.cloneElement=function(a,b,e){if(null===a||void 0===a)throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \"+a+\".\");var d=C({},a.props),c=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=K.current);void 0!==b.key&&(c=\"\"+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)J.call(b,f)&&!L.hasOwnProperty(f)&&(d[f]=void 0===b[f]&&void 0!==g?g[f]:b[f])}var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){g=Array(f);\nfor(var m=0;m<f;m++)g[m]=arguments[m+2];d.children=g}return{$$typeof:l,type:a.type,key:c,ref:k,props:d,_owner:h}};exports.createContext=function(a){a={$$typeof:u,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};a.Provider={$$typeof:t,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};\nexports.forwardRef=function(a){return{$$typeof:v,render:a}};exports.isValidElement=O;exports.lazy=function(a){return{$$typeof:y,_payload:{_status:-1,_result:a},_init:T}};exports.memo=function(a,b){return{$$typeof:x,type:a,compare:void 0===b?null:b}};exports.startTransition=function(a){var b=V.transition;V.transition={};try{a()}finally{V.transition=b}};exports.unstable_act=function(){throw Error(\"act(...) is not supported in production builds of React.\");};\nexports.useCallback=function(a,b){return U.current.useCallback(a,b)};exports.useContext=function(a){return U.current.useContext(a)};exports.useDebugValue=function(){};exports.useDeferredValue=function(a){return U.current.useDeferredValue(a)};exports.useEffect=function(a,b){return U.current.useEffect(a,b)};exports.useId=function(){return U.current.useId()};exports.useImperativeHandle=function(a,b,e){return U.current.useImperativeHandle(a,b,e)};\nexports.useInsertionEffect=function(a,b){return U.current.useInsertionEffect(a,b)};exports.useLayoutEffect=function(a,b){return U.current.useLayoutEffect(a,b)};exports.useMemo=function(a,b){return U.current.useMemo(a,b)};exports.useReducer=function(a,b,e){return U.current.useReducer(a,b,e)};exports.useRef=function(a){return U.current.useRef(a)};exports.useState=function(a){return U.current.useState(a)};exports.useSyncExternalStore=function(a,b,e){return U.current.useSyncExternalStore(a,b,e)};\nexports.useTransition=function(){return U.current.useTransition()};exports.version=\"18.2.0\";\n", "'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n", "/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n", "'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n", "import { useEffect, useRef, useState } from 'react';\r\nimport { getSvg, ISvg } from './domain/svg-provider';\r\nimport { angle2value, getClosestEdge, getPointers, IPointer, IPointers, roundToStep } from './domain/pointers-provider';\r\nimport { ISettings, ISettingsPointer } from './domain/settings-provider';\r\nimport { getNumber } from './domain/common-provider';\r\nimport {\r\n    DEFAULT_PATH_BORDER, DEFAULT_PATH_END_ANGLE, DEFAULT_PATH_RADIUS, DEFAULT_PATH_START_ANGLE,\r\n    DEFAULT_PATH_THICKNESS\r\n} from './domain/defaults-provider';\r\nimport Pointers from './ui/Pointers';\r\nimport { getData, IData } from './domain/data-provider';\r\nimport Connection from './ui/Connection';\r\nimport Text from './ui/Text';\r\nimport Ticks from './ui/Ticks';\r\nimport Circle from './ui/Circle';\r\nimport { mod } from 'mz-math';\r\nimport { isAngleInArc } from './domain/circle-provider';\r\nimport { outlineNoneStyle } from './domain/style-provider';\r\n\r\nexport const RoundSlider = (props: ISettings) => {\r\n\r\n    const [ data, setData ] = useState<IData|null>(null);\r\n    const [ svg, setSvg ] = useState<ISvg|null>(null);\r\n    const [ pointers, setPointers ] = useState<IPointers|null>(null);\r\n    const [ selectedPointerId, setSelectedPointerId ] = useState('');\r\n\r\n    const prevAngleDegRef = useRef<number|null>(null);\r\n    const svgRef = useRef<SVGSVGElement>(null);\r\n\r\n    useEffect(() => {\r\n        const _data = getData(props);\r\n        const hasChanged = JSON.stringify(data) !== JSON.stringify(_data);\r\n        if(!hasChanged) return;\r\n\r\n        setData(_data);\r\n    }, [\r\n        data,\r\n        props\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        setPointers(getPointers(props, data));\r\n    },\r\n        // eslint-disable-next-line\r\n        [\r\n        props.pointerRadius,\r\n        props.pathStartAngle,\r\n        props.pointerBgColor,\r\n        props.pointerBgColorSelected,\r\n        props.pointerBgColorDisabled,\r\n        props.pointerBorder,\r\n        props.pointerBorderColor,\r\n        props.disabled,\r\n        props.pointers,\r\n        props.pointerRadius,\r\n        props.pointerBgColor,\r\n        props.pointerBgColorSelected,\r\n        props.pointerBgColorDisabled,\r\n        props.pointerBorder,\r\n        props.pointerBorderColor,\r\n        props.disabled,\r\n        props.pathStartAngle,\r\n        props.pathEndAngle,\r\n        data,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        if(!pointers) return;\r\n\r\n        const pathStartAngle = getNumber(props.pathStartAngle, DEFAULT_PATH_START_ANGLE);\r\n        let pathEndAngle = getNumber(props.pathEndAngle, DEFAULT_PATH_END_ANGLE);\r\n\r\n        if(pathEndAngle <= pathStartAngle) {\r\n            pathEndAngle += 360;\r\n        }\r\n\r\n        setSvg(getSvg(\r\n            getNumber(props.pathRadius, DEFAULT_PATH_RADIUS),\r\n            getNumber(props.pathThickness, DEFAULT_PATH_THICKNESS),\r\n            getNumber(props.pathBorder, DEFAULT_PATH_BORDER),\r\n            pointers.maxRadius,\r\n            pathStartAngle,\r\n            pathEndAngle,\r\n        ));\r\n    }, [\r\n        props.pathRadius,\r\n        props.pathThickness,\r\n        props.pathBorder,\r\n        props.pathStartAngle,\r\n        props.pathEndAngle,\r\n        pointers,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        const clearSelectedPointer = (evt: MouseEvent) => {\r\n            const $target = evt.target as HTMLElement;\r\n            const $pointer = $target.closest('[data-type=\"pointer\"]');\r\n            if($pointer) return;\r\n\r\n            setSelectedPointerId('');\r\n        };\r\n\r\n        document.addEventListener('mousedown', clearSelectedPointer);\r\n\r\n        return () => {\r\n            document.removeEventListener('mousedown', clearSelectedPointer);\r\n        };\r\n    }, []);\r\n\r\n    const setPointersCallback = (pointer: IPointer, newAngleDeg: number) => {\r\n        if(props.disabled || !pointers.pointers || !pointer || pointer.disabled) return;\r\n\r\n        newAngleDeg = roundToStep(newAngleDeg, data.stepAngleDeg, svg.startAngleDeg, svg.endAngleDeg);\r\n        if(data.isClosedShape && mod(newAngleDeg, 360) === mod(svg.endAngleDeg, 360)){\r\n            newAngleDeg = svg.startAngleDeg;\r\n        }\r\n\r\n        if(pointer.angleDeg === newAngleDeg){\r\n            updatePointer(pointer, newAngleDeg, false);\r\n            return;\r\n        }\r\n\r\n        const handleOverlap = !props.pointersOverlap;\r\n        if(handleOverlap) {\r\n\r\n            let prevAngle, nextAngle;\r\n\r\n            if(data.isClosedShape) {\r\n                const prevIndex = mod(pointer.index - 1, pointers.pointers.length);\r\n                const nextIndex = mod(pointer.index + 1, pointers.pointers.length);\r\n\r\n                const prevPointer = pointers.pointers[prevIndex];\r\n                const nextPointer = pointers.pointers[nextIndex];\r\n\r\n                prevAngle = prevPointer.angleDeg;\r\n                nextAngle = nextPointer.angleDeg;\r\n\r\n                if(pointers.pointers.length === 2 && (prevAngle === nextAngle)) {\r\n\r\n                    const splitPointDeg = prevAngle; // === nextAngle\r\n\r\n                    if(prevAngleDegRef.current === null) {\r\n                        prevAngleDegRef.current = newAngleDeg;\r\n                    }\r\n                    else{\r\n                        // Clockwise: new angle in (splitPointDeg, splitPointDeg + 90]\r\n                        // Clockwise: prev angle in [splitPointDeg - 90, splitPointDeg)\r\n                        // CounterClockwise: new angle in [splitPointDeg - 90, splitPointDeg)\r\n                        // CounterClockwise: prev angle in (splitPointDeg, splitPointDeg + 90]\r\n\r\n                        const SAFE_ANGLE = 150;\r\n\r\n                        let t1 = splitPointDeg - SAFE_ANGLE;\r\n                        let t2 = splitPointDeg - 0.001;\r\n\r\n                        if(t1 < 0) t1 += 360;\r\n                        if(t2 < 0) t2 += 360;\r\n\r\n                        const clockwiseNew = isAngleInArc(splitPointDeg + 0.001, splitPointDeg + SAFE_ANGLE, newAngleDeg);\r\n                        const clockwisePrev = isAngleInArc(t1, t2, prevAngleDegRef.current);\r\n                        const clockwise = clockwiseNew && clockwisePrev;\r\n\r\n                        let t3 = splitPointDeg - SAFE_ANGLE;\r\n                        let t4 = splitPointDeg - 0.001;\r\n\r\n                        if(t3 < 0) t3 += 360;\r\n                        if(t4 < 0) t4 += 360;\r\n\r\n                        const counterClockwiseNew = isAngleInArc(t3, t4, newAngleDeg);\r\n                        const counterClockwisePrev = isAngleInArc(splitPointDeg + 0.001, splitPointDeg + SAFE_ANGLE, prevAngleDegRef.current);\r\n                        const counterClockwise = counterClockwiseNew && counterClockwisePrev;\r\n\r\n                        if(clockwise || counterClockwise) {\r\n                            updatePointer(pointer, splitPointDeg, true);\r\n                            return;\r\n                        }\r\n\r\n                        if(newAngleDeg !== splitPointDeg) {\r\n                           prevAngleDegRef.current = newAngleDeg;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else{\r\n                prevAngle = pointer.index === 0 ? svg.startAngleDeg : pointers.pointers[pointer.index - 1].angleDeg;\r\n                nextAngle = pointer.index === pointers.pointers.length - 1 ? svg.endAngleDeg : pointers.pointers[pointer.index + 1].angleDeg;\r\n            }\r\n\r\n            if(nextAngle <= prevAngle) {\r\n                nextAngle += 360;\r\n            }\r\n            else{\r\n                if(mod(prevAngle, 360) <= mod(nextAngle, 360)) {\r\n                    prevAngle = mod(prevAngle, 360);\r\n                    nextAngle = mod(nextAngle, 360);\r\n                }\r\n            }\r\n\r\n            if(!isAngleInArc(prevAngle, nextAngle, newAngleDeg)){\r\n                newAngleDeg = getClosestEdge(\r\n                    prevAngle,\r\n                    nextAngle,\r\n                    newAngleDeg,\r\n                    svg.cx,\r\n                    svg.cy,\r\n                    svg.radius\r\n                );\r\n            }\r\n        }\r\n\r\n        updatePointer(pointer, newAngleDeg, pointer.angleDeg !== newAngleDeg);\r\n    };\r\n\r\n    const updatePointer = (pointer: IPointer, newAngleDeg: number, angleChanged: boolean) => {\r\n\r\n        if(angleChanged) {\r\n            const _pointers = { ...pointers };\r\n            _pointers.pointers = [...pointers.pointers];\r\n            _pointers.pointers[pointer.index].prevAngleDeg = _pointers.pointers[pointer.index].angleDeg;\r\n            _pointers.pointers[pointer.index].angleDeg = newAngleDeg;\r\n            pointers.pointers = _pointers.pointers;\r\n\r\n            setPointers(_pointers);\r\n\r\n            const updatedData = (): ISettingsPointer[] =>{\r\n                return _pointers.pointers.map(pointer => {\r\n\r\n                    const val = angle2value(\r\n                        data,\r\n                        pointer.angleDeg,\r\n                        svg.startAngleDeg,\r\n                        svg.endAngleDeg\r\n                    );\r\n\r\n                    return {\r\n                        radius: pointer.radius,\r\n                        value: val,\r\n                        bgColor: pointer.bgColor,\r\n                        bgColorSelected: pointer.bgColorSelected,\r\n                        bgColorDisabled: pointer.bgColorDisabled,\r\n                        border: pointer.border,\r\n                        borderColor: pointer.borderColor,\r\n                        disabled: pointer.disabled,\r\n                        ariaLabel: pointer.ariaLabel,\r\n                    };\r\n                });\r\n\r\n            }\r\n\r\n            if(typeof props.onChange === 'function') {\r\n                const updatedPointers: ISettingsPointer[] = updatedData();\r\n                props.onChange(updatedPointers);\r\n            }\r\n        }\r\n\r\n        setSelectedPointerId(pointer.id);\r\n\r\n        const $pointer = svgRef.current?.querySelector(`[data-id=\"${ pointer.id }\"]`) as HTMLElement;\r\n        if($pointer) {\r\n            $pointer.focus();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {\r\n                svg &&\r\n                <svg\r\n                    ref={ svgRef }\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    width={ svg.size }\r\n                    height={ svg.size }\r\n                    tabIndex={ 0 }\r\n                    focusable={ true }\r\n                    aria-disabled={ props.disabled ? true : undefined }\r\n                    style={ props.svgBgColor ? { ...outlineNoneStyle, backgroundColor: props.svgBgColor } : outlineNoneStyle }\r\n                    className={ `mz-round-slider ${ props.disabled ? 'mz-round-slider-disabled' : '' }` }>\r\n\r\n                    {\r\n                        (props.SvgDefs) &&\r\n                        <defs>\r\n                            { props.SvgDefs }\r\n                        </defs>\r\n                    }\r\n\r\n                    <Circle\r\n                        settings={ props }\r\n                        pointers={ pointers }\r\n                        svg={ svg }\r\n                        $svg={ svgRef.current }\r\n                        setPointer={ setPointersCallback }\r\n                    />\r\n\r\n                    <Ticks settings={ props } svg={ svg } data={ data } />\r\n\r\n                    <Connection\r\n                        settings={ props }\r\n                        pointers={ pointers }\r\n                        svg={ svg }\r\n                        $svg={ svgRef.current }\r\n                        data={ data }\r\n                        setPointer={ setPointersCallback }\r\n                    />\r\n\r\n                    <Pointers\r\n                        settings={ props }\r\n                        pointers={ pointers }\r\n                        svg={ svg }\r\n                        $svg={ svgRef.current }\r\n                        data={ data }\r\n                        setPointer={ setPointersCallback }\r\n                        selectedPointerId={ selectedPointerId }\r\n                    />\r\n\r\n                    <Text\r\n                        settings={ props }\r\n                        pointers={ pointers }\r\n                        svg={ svg }\r\n                        data={ data }\r\n                    />\r\n                </svg>\r\n            }\r\n        </>\r\n    )\r\n};", "export const setDecimalPlaces = (num: number, decimalPlaces: number | undefined = Infinity) => {\n    if(decimalPlaces === Infinity) return num;\n\n    if(decimalPlaces < 0){\n        decimalPlaces = 0;\n    }\n\n    const coefficient = 10 ** decimalPlaces;\n    return Math.round(num * coefficient) / coefficient;\n};", "import { Vector2 } from '../types';\nimport { setDecimalPlaces } from './format';\n\nexport const mod = (n: number, m: number) => {\n    return ((n % m) + m) % m;\n};\n\n/**\n * Convert range [a, b] to [c, d].\n * f(x) = (d - c) * (x - a) / (b - a) + c\n */\nexport const convertRange = (x: number, a: number, b: number, c: number, d: number) => {\n    return (d - c) * (x - a) / (b - a) + c;\n};\n\n/**\n * Check if 2 ranges [a,b] and [c,d] overlap.\n */\nexport const doRangesOverlap = (a: number, b: number, c: number, d: number) => {\n    return Math.max(a, c) <= Math.min(b, d) ;\n};\n\n// eslint-disable-next-line\nexport const isNumber = (value: any) => {\n    return !isNaN(parseFloat(value)) && isFinite(value);\n};\n\n/**\n * Convert polar coordinates to cartesian coordinates.\n */\nexport const polarToCartesian = (center: Vector2, radii: Vector2, angleInRad: number, decimalPlaces = Infinity) : Vector2 => {\n    const [cx, cy] = center;\n    const [rx, ry] = radii;\n\n    return [\n        setDecimalPlaces(cx + (rx * Math.cos(angleInRad)), decimalPlaces),\n        setDecimalPlaces(cy + (ry * Math.sin(angleInRad)), decimalPlaces),\n    ];\n};", "import { Vector, Vector2, Vector3 } from '../types';\nimport { setDecimalPlaces } from './format';\nimport { v2Length, vNormalize, vDotProduct, vSub } from './linear-algebra/vector';\nimport { mod } from './other';\n\nexport const getV2Angle = (v2: Vector2, decimalPlaces = Infinity) => {\n    const angle = Math.atan2(v2[1], v2[0]);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const getV2AngleInEllipse = (v2: Vector2, radii: Vector2, decimalPlaces = Infinity) => {\n    const angle = Math.atan2(v2[1]/radii[1], v2[0]/radii[0]);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const setV2Angle = (v2: Vector2, newAngleRad: number, decimalPlaces = Infinity): Vector2 => {\n    const length = v2Length(v2);\n    return [\n        setDecimalPlaces(Math.cos(newAngleRad) * length, decimalPlaces),\n        setDecimalPlaces(Math.sin(newAngleRad) * length, decimalPlaces),\n    ];\n};\n\nexport const radiansToDegrees = (radians: number, decimalPlaces = Infinity) => {\n    const res = radians * (180 / Math.PI);\n    return setDecimalPlaces(res, decimalPlaces);\n};\n\nexport const degreesToRadians = (degrees: number, decimalPlaces = Infinity) => {\n    const res = degrees * (Math.PI / 180);\n    return setDecimalPlaces(res, decimalPlaces);\n};\n\n/**\n * Returns the range [0, Math.PI]\n * A = Math.acos( dot(v1, v2)/(v1.length()*v2.length()) );\n */\nexport const getVNAngleBetween = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : number => {\n    const unitVector1 = vNormalize(vector1);\n    const unitVector2 = vNormalize(vector2);\n    const dotProduct = vDotProduct(unitVector1, unitVector2);\n    const angle = Math.acos(dotProduct);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const getV2AngleBetween = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : number => {\n    // return getVNAngleBetween(vector1, vector2, decimalPlaces);\n    const diff = vSub(vector1, vector2);\n    const angle = Math.atan2(diff[1], diff[0]);\n    return setDecimalPlaces(angle, decimalPlaces);\n};\n\nexport const getV3AngleBetween = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : number => {\n    return getVNAngleBetween(vector1, vector2, decimalPlaces);\n};\n\nexport const isAngleBetween = (angleDegrees: number, startAngleDegrees: number, endAngleDegrees: number) : boolean => {\n    const distance = getAnglesSub(startAngleDegrees, endAngleDegrees);\n    const distance1 = getAnglesSub(startAngleDegrees, angleDegrees);\n    const distance2 = getAnglesSub(endAngleDegrees, angleDegrees);\n    const totalDistance = distance1 + distance2;\n\n    // Use a small threshold for floating point errors\n    return Math.abs(totalDistance - distance) <= 0.001;\n}\n\nexport const isClockwise = (angle1Deg: number, angle2Deg: number, startAngleDeg = 0) => {\n    angle1Deg = angle1Deg % 360;\n    angle2Deg = angle2Deg % 360;\n\n    if(angle1Deg < startAngleDeg) {\n        angle1Deg += 360;\n    }\n\n    if(angle2Deg < startAngleDeg) {\n        angle2Deg += 360;\n    }\n\n    return angle2Deg >= angle1Deg;\n};\n\n/**\n * Shortest distance (angular) between two angles.\n */\nexport const getAnglesSub = (angleDegrees1: number, angleDegrees2: number, decimalPlaces = Infinity) : number => {\n    const angleDistance = Math.abs(mod(angleDegrees1, 360) - mod(angleDegrees2, 360));\n    return setDecimalPlaces(angleDistance <= 180 ? angleDistance : 360 - angleDistance, decimalPlaces);\n};\n\nexport const getAnglesDistance = (angle1Deg: number, angle2Deg: number, startAngleDeg = 0, decimalPlaces = Infinity) => {\n    angle1Deg = angle1Deg % 360;\n    angle2Deg = angle2Deg % 360;\n\n    if(angle1Deg < startAngleDeg) {\n        angle1Deg += 360;\n    }\n\n    if(angle2Deg < startAngleDeg) {\n        angle2Deg += 360;\n    }\n\n    if(isClockwise(angle1Deg, angle2Deg, startAngleDeg)) {\n        return setDecimalPlaces((angle2Deg - angle1Deg + 360) % 360, decimalPlaces);\n    }\n    else{\n        return setDecimalPlaces((angle1Deg - angle2Deg + 360) % 360, decimalPlaces);\n    }\n};\n\nexport const percentToAngle = (percent: number, startAngleDeg: number, endAngleDeg: number, circleStartAngle = 0) => {\n    if(percent < 0) {\n        percent = 0;\n    }\n\n    if(percent > 100) {\n        percent = 100;\n    }\n\n    const distance = getAnglesDistance(startAngleDeg, endAngleDeg, circleStartAngle);\n\n    const clockwise = isClockwise(startAngleDeg, endAngleDeg, circleStartAngle);\n    if(clockwise) {\n        return mod(circleStartAngle + (percent * distance / 100), 360);\n    }\n    else {\n        return mod(circleStartAngle - (percent * distance / 100), 360);\n    }\n};", "import { Vector, Vector2, Vector3, Vector4 } from '../../types';\nimport { setDecimalPlaces } from '../format';\nimport { getV2Angle, setV2Angle } from '../angle';\n\n// ------------ SUM ------------------------\n\nexport const vSum = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : Vector => {\n\n    const vector: Vector = [];\n\n    for(let i=0; i<vector1.length; i++){\n        vector.push(setDecimalPlaces(vector1[i] + vector2[i], decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2Sum = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vSum(vector1, vector2, decimalPlaces) as Vector2;\n};\n\nexport const v3Sum = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vSum(vector1, vector2, decimalPlaces) as Vector3;\n};\n\n// ------------ SUB ------------------------\n\nexport const vSub = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : Vector => {\n\n    const vector: Vector = [];\n\n    for(let i=0; i<vector1.length; i++){\n        vector.push(setDecimalPlaces(vector1[i] - vector2[i], decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2Sub = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vSub(vector1, vector2, decimalPlaces) as Vector2;\n};\n\nexport const v3Sub = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vSub(vector1, vector2, decimalPlaces) as Vector3;\n};\n\n// ------------ MUL SCALAR ------------------------\n\nexport const vMulScalar = (v: Vector, scalar: number, decimalPlaces = Infinity): Vector => {\n    const vector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        vector.push(setDecimalPlaces(v[i] * scalar, decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2MulScalar = (v2: Vector2, scalar: number, decimalPlaces = Infinity): Vector2 => {\n    return vMulScalar(v2, scalar, decimalPlaces) as Vector2;\n};\n\nexport const v3MulScalar = (v3: Vector3, scalar: number, decimalPlaces = Infinity): Vector3 => {\n    return vMulScalar(v3, scalar, decimalPlaces) as Vector3;\n};\n\n// ------------ DIVIDE ------------------------\n\nexport const vDivideScalar = (v: Vector, scalar: number, decimalPlaces = Infinity): Vector => {\n    if(scalar === 0){\n        throw new Error('Division by zero error.');\n    }\n\n    const vector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        vector.push(setDecimalPlaces(v[i] / scalar, decimalPlaces));\n    }\n\n    return vector;\n};\n\nexport const v2DivideScalar = (v2: Vector2, scalar: number, decimalPlaces = Infinity): Vector2 => {\n    return vDivideScalar(v2, scalar, decimalPlaces) as Vector2;\n};\n\nexport const v3DivideScalar = (v3: Vector3, scalar: number, decimalPlaces = Infinity): Vector3 => {\n    return vDivideScalar(v3, scalar, decimalPlaces) as Vector3;\n};\n\n// ------------ LENGTH ------------------------\n\nexport const vLength = (vector: Vector, decimalPlaces = Infinity) => {\n    let sum = 0;\n\n    for(let i=0; i<vector.length; i++){\n        sum += vector[i] * vector[i];\n    }\n\n    return setDecimalPlaces(Math.sqrt(sum), decimalPlaces);\n};\n\nexport const v2Length = (vector: Vector2, decimalPlaces = Infinity) => {\n    return vLength(vector, decimalPlaces);\n};\n\nexport const v3Length = (vector: Vector3, decimalPlaces = Infinity) => {\n    return vLength(vector, decimalPlaces);\n};\n\nexport const v2SetLength = (v2: Vector2, newLength: number, decimalPlaces = Infinity): Vector2 => {\n    const angle = getV2Angle(v2);\n    return [\n        setDecimalPlaces(Math.cos(angle) * newLength, decimalPlaces),\n        setDecimalPlaces(Math.sin(angle) * newLength, decimalPlaces),\n    ];\n};\n\n// ----------- DISTANCE ------------------------\n\nexport const vDistance = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) => {\n    const diff = vSub(vector1, vector2);\n    return vLength(diff, decimalPlaces);\n};\n\nexport const v2Distance = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) => {\n    const diff = vSub(vector1, vector2);\n    return vLength(diff, decimalPlaces);\n};\n\nexport const v3Distance = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) => {\n    const diff = vSub(vector1, vector2);\n    return vLength(diff, decimalPlaces);\n};\n\n// ------------ NORMALIZE ------------------------\n\n/**\n * Normalization creates a unit vector, which is a vector of length 1.\n */\nexport const vNormalize = (v: Vector, decimalPlaces = Infinity) : Vector => {\n    const length = vLength(v);\n    const unitVector: Vector = [];\n\n    for(let i=0; i<v.length; i++){\n        unitVector.push(length === 0 ? 0 : setDecimalPlaces(v[i] / length, decimalPlaces));\n    }\n\n    return unitVector;\n};\n\nexport const v2Normalize = (v2: Vector2, decimalPlaces = Infinity) : Vector2 => {\n    return vNormalize(v2, decimalPlaces) as Vector2;\n};\n\nexport const v3Normalize = (v3: Vector3, decimalPlaces = Infinity) : Vector3 => {\n    return vNormalize(v3, decimalPlaces) as Vector3;\n};\n\n// ------------ DOT PRODUCT ------------------------\n\nexport const vDotProduct = (vector1: Vector, vector2: Vector, decimalPlaces = Infinity) : number => {\n    let sum = 0;\n\n    for(let i=0; i<vector1.length; i++){\n        sum += vector1[i] * vector2[i];\n    }\n\n    return setDecimalPlaces(sum, decimalPlaces);\n};\n\nexport const v2DotProduct = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity) : number => {\n    return vDotProduct(vector1, vector2, decimalPlaces);\n};\n\nexport const v3DotProduct = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity) : number => {\n    return vDotProduct(vector1, vector2, decimalPlaces);\n};\n\n// ------------ CROSS PRODUCT ------------------------\n\n/**\n * Cross product is possible on 3D vectors only.\n * The cross product a \u00D7 b is defined as a vector c that is perpendicular (orthogonal) to both a and b.\n */\nexport const v3CrossProduct = (vector1: Vector3, vector2: Vector3, decimalPlaces = Infinity): Vector3 => {\n    return [\n        setDecimalPlaces(vector1[1] * vector2[2] - vector1[2] * vector2[1], decimalPlaces),\n        setDecimalPlaces(vector1[2] * vector2[0] - vector1[0] * vector2[2], decimalPlaces),\n        setDecimalPlaces(vector1[0] * vector2[1] - vector1[1] * vector2[0], decimalPlaces),\n    ];\n};\n\n// --------------- INIT VECTOR HELPER -----------------\n\nexport const v2 = (defaultValue = 0): Vector2 => {\n    return [defaultValue, defaultValue];\n};\n\nexport const v3 = (defaultValue = 0): Vector3 => {\n    return [defaultValue, defaultValue, defaultValue];\n};\n\nexport const v4 = (defaultValue = 0): Vector4 => {\n    return [defaultValue, defaultValue, defaultValue, defaultValue];\n};\n\nexport const vN = (N: number, defaultValue = 0): Vector => {\n\n    if(N < 0){\n        throw new Error('N must be a non-negative number.');\n    }\n\n    const vector: Vector = [];\n    for(let i=0; i<N; i++){\n        vector.push(defaultValue);\n    }\n    return vector;\n};\n\n/**\n * Initialize vector using polar coordinates\n */\nexport const v2FromPolarCoords = (distance: number, angleRad: number): Vector2 => {\n    let vector: Vector2 = [0, 0];\n    vector = v2SetLength(vector, distance);\n    return setV2Angle(vector, angleRad);\n};\n\n// --------------- EQUALITY -------------------------\n\nexport const vEqual = (vector1: Vector, vector2: Vector): boolean => {\n    if(vector1.length !== vector2.length) return false;\n\n    for(let i=0; i<vector1.length; i++){\n        if(vector1[i] !== vector2[i]) return false;\n    }\n\n    return true;\n};\n\n// --------------- NORMAL --------------------------\n\nexport const v2GetNormal = (vector1: Vector2, vector2: Vector2, decimalPlaces = Infinity): Vector2 => {\n    const sub = v2Sub(vector2, vector1);\n    return [\n        -setDecimalPlaces(sub[1], decimalPlaces),\n        setDecimalPlaces(sub[0], decimalPlaces)\n    ];\n};", "import { Matrix2, Matrix3, Matrix4, Matrix, Vector, Vector2, Vector3 } from '../../types';\nimport { vMulScalar, vSum, vSub, vDotProduct, vN, vEqual, vDivideScalar } from './vector';\n\n// --------------- SUM ----------------------\n\nexport const mSum = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push(vSum(matrix1[i], matrix2[i], decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2Sum = (matrix1: Matrix2, matrix2: Matrix2, decimalPlaces = Infinity): Matrix2 => {\n    return mSum(matrix1, matrix2, decimalPlaces) as Matrix2;\n};\n\nexport const m3Sum = (matrix1: Matrix3, matrix2: Matrix3, decimalPlaces = Infinity): Matrix3 => {\n    return mSum(matrix1, matrix2, decimalPlaces) as Matrix3;\n};\n\n// --------------- SUB ----------------------\n\nexport const mSub = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push(vSub(matrix1[i], matrix2[i], decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2Sub = (matrix1: Matrix2, matrix2: Matrix2, decimalPlaces = Infinity): Matrix2 => {\n    return mSub(matrix1, matrix2, decimalPlaces) as Matrix2;\n};\n\nexport const m3Sub = (matrix1: Matrix3, matrix2: Matrix3, decimalPlaces = Infinity): Matrix3 => {\n    return mSub(matrix1, matrix2, decimalPlaces) as Matrix3;\n};\n\n// --------------- MUL SCALAR ----------------------\n\nexport const mMulScalar = (m: Matrix, scalar: number, decimalPlaces = Infinity): Matrix => {\n    const matrix: Matrix = [];\n\n    for(const v of m){\n        matrix.push(vMulScalar(v, scalar, decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2MulScalar = (m2: Matrix2, scalar: number, decimalPlaces = Infinity): Matrix2 => {\n    return mMulScalar(m2, scalar, decimalPlaces) as Matrix2;\n};\n\nexport const m3MulScalar = (m3: Matrix3, scalar: number, decimalPlaces = Infinity): Matrix3 => {\n    return mMulScalar(m3, scalar, decimalPlaces) as Matrix3;\n};\n\n// --------------- DIVIDE SCALAR ----------------------\n\nexport const mDivideScalar = (m: Matrix, scalar: number, decimalPlaces = Infinity): Matrix => {\n    if(scalar === 0){\n        throw new Error('Division by zero error.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(const v of m){\n        matrix.push(vDivideScalar(v, scalar, decimalPlaces));\n    }\n\n    return matrix;\n};\n\nexport const m2DivideScalar = (m2: Matrix2, scalar: number, decimalPlaces = Infinity): Matrix2 => {\n    return mDivideScalar(m2, scalar, decimalPlaces) as Matrix2;\n};\n\nexport const m3DivideScalar = (m3: Matrix3, scalar: number, decimalPlaces = Infinity): Matrix3 => {\n    return mDivideScalar(m3, scalar, decimalPlaces) as Matrix3;\n};\n\n\n// --------------- TRANSPOSE ----------------------\n\nexport const mTranspose = (m: Matrix): Matrix => {\n\n    const vectorsCount = m.length;\n    if(vectorsCount <= 0) return m;\n\n    const vectorLength = m[0].length;\n    if(vectorLength <= 0) return m;\n\n    const matrix: Matrix = [];\n    for(let i=0; i<vectorLength; i++){\n        matrix.push([]);\n    }\n\n    for(let i=0; i<vectorsCount; i++){\n        for(let j=0; j<vectorLength; j++){\n            matrix[j].push(m[i][j]);\n        }\n    }\n\n    return matrix;\n};\n\nexport const m2Transpose = (m2: Matrix2): Matrix => {\n    return mTranspose(m2);\n};\n\nexport const m3Transpose = (m3: Matrix3): Matrix => {\n    return mTranspose(m3);\n};\n\n// ----------------- RESET ----------------------\n\nexport const mReset = (m: Matrix, defaultValue = 0): Matrix => {\n\n    if(m.length <= 0) return [];\n\n    const res: Matrix = [];\n\n    for(let i=0; i<m.length; i++){\n        const size = m[i].length;\n\n        const vector: Vector = [];\n        for(let j=0; j<size; j++){\n            vector.push(defaultValue);\n        }\n\n        res.push(vector);\n    }\n\n    return res;\n};\n\nexport const m2Reset = (m2: Matrix2, defaultValue = 0): Matrix2 => {\n    return mReset(m2, defaultValue) as Matrix2;\n};\n\nexport const m3Reset = (m3: Matrix3, defaultValue = 0): Matrix3 => {\n    return mReset(m3, defaultValue) as Matrix3;\n};\n\n// --------------- MATRIX INIT HELPERS -----------------\n\nexport const m2x2 = (defaultValue = 0): Matrix2 => {\n    return [\n        [defaultValue, defaultValue],\n        [defaultValue, defaultValue],\n    ];\n};\n\nexport const m3x3 = (defaultValue = 0): Matrix3 => {\n    return [\n        [defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue],\n    ];\n};\n\nexport const m4x4 = (defaultValue = 0): Matrix4 => {\n    return [\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n        [defaultValue, defaultValue, defaultValue, defaultValue],\n    ];\n};\n\nexport const mNxM = (N: number, M: number, defaultValue = 0): Matrix => {\n    if(N <= 0 || M <= 0){\n        throw new Error('M and N must be positive numbers.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<N; i++){\n        matrix.push(vN(M, defaultValue));\n    }\n\n    return matrix;\n};\n\nexport const identity2 = (): Matrix2 => {\n    return [\n        [1, 0],\n        [0, 1],\n    ];\n};\n\nexport const identity3 = (): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\nexport const identity4 = (): Matrix4 => {\n    return [\n        [1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Identity Matrix (I).\n * M x I = I x M = M for any matrix M.\n * Identity Matrix is a special case of scale matrix.\n */\nexport const identityN = (N: number): Matrix => {\n    if(N < 0){\n        throw new Error('N must be a non-negative number.');\n    }\n\n    if(N === 0) return [];\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<N; i++){\n        const vector: Vector = [];\n        for(let j=0; j<N; j++){\n            vector.push(i === j ? 1 : 0);\n        }\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\n// -------------- MATRIX MANIPULATION HELPERS ------------\n\nexport const mDeepCopy = (m: Matrix): Matrix => {\n    const matrix: Matrix = [];\n\n    for(let i=0; i<m.length; i++){\n        const v = m[i];\n        const vector: Vector = [];\n        for(let j=0; j<v.length; j++){\n            vector.push(v[j]);\n        }\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\nexport const m2DeepCopy = (m2: Matrix2): Matrix2 => {\n    return mDeepCopy(m2) as Matrix2;\n};\n\nexport const m3DeepCopy = (m3: Matrix3): Matrix3 => {\n    return mDeepCopy(m3) as Matrix3;\n};\n\n// -------------- APPEND / PREPEND ROW OR COLUMN ---------------\n\nexport const mAppendCol = (m: Matrix, col: Vector): Matrix  => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].push(col[i]);\n    }\n\n    return copy;\n};\n\nexport const mPrependCol = (m: Matrix, col: Vector): Matrix  => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].unshift(col[i]);\n    }\n\n    return copy;\n};\n\nexport const mAppendRow = (m: Matrix, row: Vector) : Matrix => {\n    const copy = mDeepCopy(m);\n    copy.push(row);\n    return copy;\n};\n\nexport const m2AppendRow = (m2: Matrix2, row: Vector2) : Matrix2 => {\n    const copy = m2DeepCopy(m2);\n    copy.push(row);\n    return copy;\n};\n\nexport const m3AppendRow = (m3: Matrix3, row: Vector3) : Matrix3 => {\n    const copy = m3DeepCopy(m3);\n    copy.push(row);\n    return copy;\n};\n\nexport const mPrependRow = (m: Matrix, row: Vector) : Matrix => {\n    const copy = mDeepCopy(m);\n    copy.unshift(row);\n    return copy;\n};\n\nexport const m2PrependRow = (m2: Matrix2, row: Vector2) : Matrix2 => {\n    const copy = m2DeepCopy(m2);\n    copy.unshift(row);\n    return copy;\n};\n\nexport const m3PrependRow = (m3: Matrix3, row: Vector3) : Matrix3 => {\n    const copy = m3DeepCopy(m3);\n    copy.unshift(row);\n    return copy;\n};\n\n// ------------ DELETE ROW OR COLUMN ----------------------------\n\nexport const mDelLastRow = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    copy.pop();\n    return copy;\n};\n\nexport const mDelFirstRow = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    copy.shift();\n    return copy;\n};\n\nexport const mDelLastColumn = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].pop();\n    }\n\n    return copy;\n};\n\nexport const mDelFirstColumn = (m: Matrix): Matrix => {\n    if(m.length <= 0) return [];\n\n    const copy = mDeepCopy(m);\n    for(let i=0; i<copy.length; i++){\n        copy[i].shift();\n    }\n\n    return copy;\n};\n\n// ----------- GET COLUMN ---------------------------\n\nexport const mGetFirstColumn = (m: Matrix) : Vector => {\n    if(m.length <= 0) return [];\n\n    const vector: Vector = [];\n    for(let i=0; i<m.length; i++){\n        vector.push(m[i][0]);\n    }\n    return vector;\n};\n\nexport const mGetLastColumn = (m: Matrix) : Vector => {\n    if(m.length <= 0) return [];\n\n    const size = m[0].length;\n\n    const vector: Vector = [];\n    for(let i=0; i<m.length; i++){\n        vector.push(m[i][size - 1]);\n    }\n    return vector;\n};\n\nexport const mGetColumn = (m: Matrix, colIndex: number) : Vector => {\n    if(m.length <= 0) return [];\n\n    const vector: Vector = [];\n    for(let i=0; i<m.length; i++){\n        vector.push(m[i][colIndex]);\n    }\n    return vector;\n};\n\n// --------------- MULTIPLICATION ------------------------\n\n/**\n * Matrix Multiplication.\n * - Matrix multiplication is not commutative: M1 x M2 !== M2 x M1\n * - Matrix multiplication is associative: A x (B x C) = (A x B) x C.\n * - A x (B + C) = A x B + A x C\n */\nexport const mMul = (matrix1: Matrix, matrix2: Matrix, decimalPlaces = Infinity): Matrix => {\n\n    const matrix: Matrix = [];\n    for(let i=0; i<matrix1.length; i++){\n        matrix.push([]);\n    }\n\n    const transposed = mTranspose(matrix2);\n\n    if(matrix.length !== transposed.length){\n        throw new Error('The number of columns in the 1st matrix must be equal to the number of rows in the 2nd matrix.');\n    }\n\n    for(let i=0; i<matrix1.length; i++){\n        const vector1 = matrix1[i];\n\n        for(let j=0; j<transposed.length; j++){\n            const vector2 = transposed[j];\n            const product = vDotProduct(vector1, vector2, decimalPlaces);\n            matrix[i].push(product);\n        }\n    }\n\n    return matrix;\n};\n\nexport const mMulVector = (matrix: Matrix, vector: Vector, decimalPlaces = Infinity): Vector => {\n\n    if(matrix.length < 0) return [];\n\n    if(matrix[0].length !== vector.length){\n        throw new Error('The number of columns in the matrix must be equal to the length of the vector.');\n    }\n\n    const res: Vector = [];\n\n    for(let i=0; i<matrix.length; i++){\n        res[i] = vDotProduct(matrix[i], vector, decimalPlaces);\n    }\n\n    return res;\n};\n\n// --------------- EQUALITY -----------------------------\n\nexport const mEqual = (matrix1: Matrix, matrix2: Matrix): boolean => {\n    if(matrix1.length !== matrix2.length) return false;\n\n    for(let i=0; i<matrix1.length; i++){\n        if(!vEqual(matrix1[i], matrix2[i])) return false;\n    }\n\n    return true;\n};\n\n// ------------------- Determinant ---------------\n\n/**\n * Returns a matrix without provided row / col.\n * If we received a matrix M (mxm) ===> returns matrix N (m-1 x m-1)\n * The matrix must be square.\n */\nconst mMinorHelper = (m: Matrix, row: number, col: number) => {\n    const size = m.length;\n\n    if(size <= 0){\n        throw new Error('The matrix should not be empty.');\n    }\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    const matrix: Matrix = [];\n\n    for(let i=0; i<size; i++){\n        if(i === row) continue;\n\n        const vector: Vector = [];\n\n        for(let j=0; j<size; j++){\n            if(j === col) continue;\n            vector.push(m[i][j]);\n        }\n\n        matrix.push(vector);\n    }\n\n    return matrix;\n};\n\n/**\n * Calculate matrix minor.\n */\nexport const mMinor = (m: Matrix, row: number, col: number) => {\n    const size = m.length;\n\n    if(size <= 0){\n        throw new Error('The matrix should not be empty.');\n    }\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    // prepare the matrix without provided row and column\n    const matrix = mMinorHelper(m, row, col);\n\n    // calculate the matrix determinant\n    return mDeterminant(matrix);\n};\n\n/**\n * Calculate determinant for NxN matrix.\n * Matrix should be square.\n */\nexport const mDeterminant = (matrix: Matrix): number => {\n    const size = matrix.length;\n    if(size === 0) return 1;\n\n    if(size !== matrix[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    if(size === 1) return matrix[0][0];\n    if(size === 2) return m2Determinant(matrix as Matrix2);\n\n    let d = 0;\n\n    for(let i=0; i<size; i++){\n        const minor = mMinor(matrix, 0, i);\n\n        let param = matrix[0][i];\n        if(i % 2 !== 0){\n            param = -param;\n        }\n\n        d += minor * param;\n    }\n\n    return d;\n};\n\n/**\n * Calculate determinant for 2x2 matrix.\n * Matrix should be square.\n */\nexport const m2Determinant = (m2: Matrix2): number => {\n    if(m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return m2[0][0] * m2[1][1] - m2[1][0] * m2[0][1];\n};\n\n/**\n * Calculate determinant for 3x3 matrix.\n * Matrix should be square.\n */\nexport const m3Determinant = (m3: Matrix3): number => {\n    if(m3.length !== m3[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return mDeterminant(m3);\n};\n\n// ------------------ INVERSE -----------------------\n\nexport const m2Adjugate = (m2: Matrix2): Matrix2|null => {\n    if(m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    return [\n      [m2[1][1], -m2[0][1]],\n      [-m2[1][0], m2[0][0]],\n    ];\n};\n\nexport const m3Adjugate = (m3: Matrix3) : Matrix3|null => {\n    return mAdjugate(m3) as (Matrix3|null);\n};\n\n/**\n * Adjugate is a transpose of a cofactor matrix\n */\nexport const mAdjugate = (m: Matrix): Matrix|null => {\n\n    const size = m.length;\n    if(size <= 0) return null;\n\n    if(size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    if(size === 1) return m;\n\n    if(size === 2) return m2Adjugate(m as Matrix2);\n\n    // build a cofactor matrix ----------------\n    const cofactors: Matrix = [];\n\n    for(let i=0; i<size; i++){\n        const vector: Vector = [];\n        for(let j=0; j<size; j++){\n            const minor = mMinor(m, i, j);\n            const sign = Math.pow(-1, i + j)\n            vector.push(sign * minor);\n        }\n        cofactors.push(vector);\n    }\n\n    // find an Adjugate - a transpose of a cofactor matrix\n    return mTranspose(cofactors);\n};\n\n/**\n * Singular Matrix = a square matrix that does not have a matrix inverse.\n * A matrix is singular iff its determinant is 0.\n */\nexport const isSingularMatrix = (m: Matrix) => {\n    if(m.length > 0 && m.length !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    const d = mDeterminant(m);\n    return d === 0;\n};\n\n/**\n * Square matrix A (nxn) is invertible is there is another square matrix B (nxn) so AxB = BxA = I\n * For A (2x2) matrix, the inverse is:\n * (1 / (determinant(A))) * adj(A)\n */\nexport const m2Inverse = (m2: Matrix2, decimalPlaces = Infinity): (Matrix2 | null) => {\n    if(m2.length > 0 && m2.length !== m2[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    const d = m2Determinant(m2);\n    if(d === 0) return null;\n\n    const adj = m2Adjugate(m2);\n    if(adj === null) return null;\n\n    return m2DivideScalar(adj, d, decimalPlaces);\n};\n\nexport const m3Inverse = (m3: Matrix3, decimalPlaces = Infinity): (Matrix3 | null) => {\n    return mInverse(m3, decimalPlaces) as (Matrix3|null);\n};\n\nexport const mInverse = (m: Matrix, decimalPlaces = Infinity): (Matrix | null) => {\n    const size = m.length;\n\n    if(size > 0 && size !== m[0].length){\n        throw new Error('The matrix must be square.');\n    }\n\n    // find a determinant ----------------------\n    const d = mDeterminant(m);\n\n    // find an Adjugate - a transpose of a cofactor matrix\n    const adj = mAdjugate(m);\n    if(adj === null) return null;\n\n    return mDivideScalar(adj, d, decimalPlaces);\n};", "import { Matrix2, Matrix3, Matrix4, Matrix, Vector2, Vector3, Vector4 } from '../../types';\nimport { v2Normalize, v3MulScalar, v3Normalize } from './vector';\nimport { mMulVector, mMul } from './matrix';\nimport { setDecimalPlaces } from '../format';\n\n/*\nAny 2D affine transformation can be decomposed\ninto a rotation, followed by a scaling, followed by a\nshearing, and followed by a translation.\n---------------------------------------------------------\nAffine matrix = translation x shearing x scaling x rotation\n */\n\n// ----------------- CSS -------------------------------------\n\n/**\n * Matrix 2D in non-homogeneous coordinates to CSS matrix() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix\n */\nexport const m2ToCSS = (m: Matrix2) : string => {\n    const a = m[0][0];\n    const b = m[1][0];\n    const c = m[0][1];\n    const d = m[1][1];\n\n    return `matrix(${ a }, ${ b }, ${ c }, ${ d }, 0, 0)`;\n};\n\n/**\n * Matrix 2D in homogeneous coordinates to CSS matrix() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix\n */\nexport const m2hToCSS = (m: Matrix3) : string => {\n    const a = m[0][0];\n    const b = m[1][0];\n    const c = m[0][1];\n    const d = m[1][1];\n    const tx = m[0][2];\n    const ty = m[1][2];\n\n    return `matrix(${ a }, ${ b }, ${ c }, ${ d }, ${ tx }, ${ ty })`;\n};\n\n/**\n * Matrix 2D in homogeneous coordinates to CSS matrix3d() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d\n */\nexport const m2hToCSS3d = (m: Matrix3) : string => {\n    const a = m[0][0];\n    const b = m[1][0];\n    const c = m[0][1];\n    const d = m[1][1];\n    const tx = m[0][2];\n    const ty = m[1][2];\n\n    return `matrix3d(${ a }, ${ b }, 0, 0, ${ c }, ${ d }, 0, 0, 0, 0, 1, 0, ${ tx }, ${ ty }, 0, 1)`;\n};\n\n/**\n * Matrix 3D in homogeneous coordinates to CSS matrix3d() function\n * https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d\n */\nexport const m3hToCSS3d = (m: Matrix4) : string => {\n\n    return `matrix3d(\n        ${ m[0][0] }, ${ m[0][1] }, ${ m[0][2] }, ${ m[0][3] },\n        ${ m[1][0] }, ${ m[1][1] }, ${ m[1][2] }, ${ m[1][3] },\n        ${ m[2][0] }, ${ m[2][1] }, ${ m[2][2] }, ${ m[2][3] },\n        ${ m[3][0] }, ${ m[3][1] }, ${ m[3][2] }, ${ m[3][3] }\n    )`;\n};\n\n// ---------------- TRANSLATION MATRICES ----------------------\n\nexport const m2Translation = (position: Vector2, decimalPlaces = Infinity): Matrix2 => {\n\n    return [\n        [1, 0],\n        [0, 1],\n        [setDecimalPlaces(position[0], decimalPlaces), setDecimalPlaces(position[1], decimalPlaces)],\n    ];\n};\n\nexport const m3Translation = (position: Vector3, decimalPlaces = Infinity): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n        [\n            setDecimalPlaces(position[0], decimalPlaces),\n            setDecimalPlaces(position[1], decimalPlaces),\n            setDecimalPlaces(position[2], decimalPlaces)\n        ],\n    ];\n};\n\n/**\n * 2D Translation matrix in homogeneous coordinates.\n */\nexport const m2TranslationH = (position: Vector3, decimalPlaces = Infinity): Matrix3 => {\n\n    return [\n        [1, 0, setDecimalPlaces(position[0], decimalPlaces)],\n        [0, 1, setDecimalPlaces(position[1], decimalPlaces)],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * 3D Translation matrix in homogeneous coordinates.\n */\nexport const m3TranslationH = (position: Vector4, decimalPlaces = Infinity): Matrix4 => {\n\n    return [\n        [1, 0, 0, setDecimalPlaces(position[0], decimalPlaces)],\n        [0, 1, 0, setDecimalPlaces(position[1], decimalPlaces)],\n        [0, 0, 1, setDecimalPlaces(position[2], decimalPlaces)],\n        [0, 0, 0, 1],\n    ];\n};\n\n// ---------------- ROTATION MATRICES -------------------------\n\n/**\n * Rotation of an angle about the origin.\n */\nexport const m2Rotation = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix2 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin],\n        [sin, cos],\n    ] :\n    [\n        [cos, sin],\n        [-sin, cos],\n    ];\n};\n\n/**\n * Rotation of an angle about the origin in homogeneous coordinates (clockwise).\n */\nexport const m2RotationH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin, 0],\n        [sin, cos, 0],\n        [0, 0, 1],\n    ]:\n    [\n        [cos, sin, 0],\n        [-sin, cos, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Rotation of an angle \"angleRad\" around the given point (transformOrigin) in homogeneous coordinates (clockwise).\n * result_vector = TranslationMatrix(x, y) * RotationMatrix() * TranslationMatrix(-x, -y) * position_vector\n */\nexport const m2RotationAroundPointH = (\n    angleRad: number,\n    transformOrigin: Vector3,\n    isClockwise = true,\n    decimalPlaces = Infinity): Matrix3 => {\n\n    const translation = m2TranslationH(transformOrigin, decimalPlaces);\n    const rotation = m2RotationH(angleRad, isClockwise, decimalPlaces);\n    const translationBack = m2TranslationH(v3MulScalar(transformOrigin, -1), decimalPlaces);\n    const temp1 = mMul(translation, rotation);\n    return mMul(temp1, translationBack) as Matrix3;\n};\n\nexport const m2RotateAroundPointH = (\n    angleRad: number,\n    transformOrigin: Vector3,\n    position: Vector3,\n    isClockwise = true,\n    decimalPlaces = Infinity): Vector3 => {\n\n    const mat3h = m2RotationAroundPointH(angleRad, transformOrigin, isClockwise, decimalPlaces);\n    return mMulVector(mat3h, position) as Vector3;\n};\n\n/**\n * Rotate vector around the origin by angle \"angleRad\" (clockwise).\n */\nexport const v2Rotate = (angleRad: number, vector: Vector2, isClockwise = true, decimalPlaces = Infinity): Vector2 => {\n    const unitVector = v2Normalize(vector);\n    return mMulVector(m2Rotation(angleRad, isClockwise, decimalPlaces), unitVector) as Vector2;\n};\n\n/**\n * Rotate vector around the origin by angle \"angleRad\" (clockwise).\n */\nexport const v2RotateH = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m2RotationH(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n/**\n * Rotation around the X axis (clockwise).\n */\nexport const m3RotationX = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [1, 0, 0],\n        [0, cos, -sin],\n        [0, sin, cos],\n    ] :\n    [\n        [1, 0, 0],\n        [0, cos, sin],\n        [0, -sin, cos],\n    ];\n};\n\n/**\n * Rotation around the X axis (clockwise) - in homogeneous coordinates\n */\nexport const m3RotationXH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix4 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n            [1, 0, 0, 0],\n            [0, cos, -sin, 0],\n            [0, sin, cos, 0],\n            [0, 0, 0, 1],\n        ] :\n        [\n            [1, 0, 0, 0],\n            [0, cos, sin, 0],\n            [0, -sin, cos, 0],\n            [0, 0, 0, 1],\n        ];\n};\n\nexport const v3RotateX = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationX(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n/**\n * Rotation around the Y axis (clockwise).\n */\nexport const m3RotationY = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, 0, sin],\n        [0, 1, 0],\n        [-sin, 0, cos],\n    ] :\n    [\n        [cos, 0, -sin],\n        [0, 1, 0],\n        [sin, 0, cos],\n    ];\n};\n\n/**\n * Rotation around the Y axis (clockwise) - in homogeneous coordinates\n */\nexport const m3RotationYH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix4 => {\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n            [cos, 0, sin, 0],\n            [0, 1, 0, 0],\n            [-sin, 0, cos, 0],\n            [0, 0, 0, 1],\n        ] :\n        [\n            [cos, 0, -sin, 0],\n            [0, 1, 0, 0],\n            [sin, 0, cos, 0],\n            [0, 0, 0, 1],\n        ];\n};\n\nexport const v3RotateY = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationY(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n/**\n * Rotation around the Z axis (clockwise).\n */\nexport const m3RotationZ = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix3 => {\n\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin, 0],\n        [sin, cos, 0],\n        [0, 0, 1],\n    ] : [\n        [cos, sin, 0],\n        [-sin, cos, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Rotation around the Z axis (clockwise)- in homogeneous coordinates\n */\nexport const m3RotationZH = (angleRad: number, isClockwise = true, decimalPlaces = Infinity): Matrix4 => {\n\n    const cos = setDecimalPlaces(Math.cos(angleRad), decimalPlaces);\n    const sin = setDecimalPlaces(Math.sin(angleRad), decimalPlaces);\n\n    return isClockwise ? [\n        [cos, -sin, 0, 0],\n        [sin, cos, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ] : [\n        [cos, sin, 0, 0],\n        [-sin, cos, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\nexport const v3RotateZ = (angleRad: number, vector: Vector3, isClockwise = true, decimalPlaces = Infinity): Vector3 => {\n    const unitVector = v3Normalize(vector);\n    return mMulVector(m3RotationZ(angleRad, isClockwise, decimalPlaces), unitVector) as Vector3;\n};\n\n// ---------------- SCALE MATRICES -------------\n\n/**\n * Get matrix for arbitrary scaling pivot point.\n * result_vector = TranslationMatrix(x, y) * ScaleMatrix() * TranslationMatrix(-x, -y) * scale_vector\n */\nexport const m2ScaleAtPointHMatrix = (\n    scaleVector: Vector3,\n    transformOrigin: Vector3,\n    decimalPlaces = Infinity): Matrix3 => {\n\n    const translation = m2TranslationH(transformOrigin, decimalPlaces);\n    const scale = m2ScaleH(scaleVector);\n    const translationBack = m2TranslationH(v3MulScalar(transformOrigin, -1), decimalPlaces);\n    const temp1 = mMul(translation, scale);\n    return mMul(temp1, translationBack) as Matrix3;\n};\n\nexport const m2ScaleAtPointH = (\n    scaleVector: Vector3,\n    transformOrigin: Vector3,\n    point: Vector3,\n    decimalPlaces = Infinity): Vector3 => {\n\n    const mat3h = m2ScaleAtPointHMatrix(scaleVector, transformOrigin, decimalPlaces);\n    return mMulVector(mat3h, point) as Vector3;\n};\n\nexport const m2Scale = (scaleVector: Vector2): Matrix2 => {\n    return [\n        [scaleVector[0], 0],\n        [0, scaleVector[1]],\n    ];\n};\n\nexport const v2Scale = (scaleVector: Vector2, vector: Vector2): Vector2 => {\n    return mMulVector(m2Scale(scaleVector), vector) as Vector2;\n};\n\n/**\n * homogeneous coordinates\n */\nexport const m2ScaleH = (scaleVector: Vector3): Matrix3 => {\n    return [\n        [scaleVector[0], 0, 0],\n        [0, scaleVector[1], 0],\n        [0, 0, 1],\n    ];\n};\n\nexport const m3Scale = (scaleVector: Vector3): Matrix3 => {\n    return [\n        [scaleVector[0], 0, 0],\n        [0, scaleVector[1], 0],\n        [0, 0, scaleVector[2]],\n    ];\n};\n\nexport const m3ScaleH = (scaleVector: Vector4): Matrix4 => {\n    return [\n        [scaleVector[0], 0, 0, 0],\n        [0, scaleVector[1], 0, 0],\n        [0, 0, scaleVector[2], 0],\n        [0, 0, 0, 1]\n    ];\n};\n\nexport const v3Scale = (scaleVector: Vector3, vector: Vector3): Vector3 => {\n    return mMulVector(m3Scale(scaleVector), vector) as Vector3;\n};\n\n/**\n * Stretch, parallel to the x-axis.\n */\nexport const m2ScaleX = (scale: number): Matrix2 => {\n    return [\n        [scale, 0],\n        [0, 1],\n    ];\n};\n\n/**\n * Stretch, parallel to the x-axis - homogeneous coordinates\n */\nexport const m2ScaleXH = (scale: number): Matrix3 => {\n    return [\n        [scale, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in x-direction\n */\nexport const m3ScaleX = (scale: number): Matrix3 => {\n    return [\n        [scale, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in x-direction\n */\nexport const m3ScaleXH = (scale: number): Matrix4 => {\n    return [\n        [scale, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in y-direction\n */\nexport const m3ScaleY = (scale: number): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, scale, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in y-direction\n */\nexport const m3ScaleYH = (scale: number): Matrix => {\n    return [\n        [1, 0, 0, 0],\n        [0, scale, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Stretch in z-direction\n */\nexport const m3ScaleZ = (scale: number): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, scale],\n    ];\n};\n\n/**\n * Stretch in z-direction\n */\nexport const m3ScaleZH = (scale: number): Matrix4 => {\n    return [\n        [1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, scale, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Stretch, parallel to the y-axis.\n */\nexport const m2ScaleY = (scale: number): Matrix2 => {\n    return [\n        [1, 0],\n        [0, scale],\n    ];\n};\n\n/**\n * Stretch, parallel to the y-axis - homogeneous coordinates\n */\nexport const m2ScaleYH = (scale: number): Matrix3 => {\n    return [\n        [1, 0, 0],\n        [0, scale, 0],\n        [0, 0, 1],\n    ];\n};\n\n// ---------------- REFLECTION MATRICES -------------------------\n\n/**\n * Reflection about the origin.\n */\nexport const m2ReflectionOrigin = (): Matrix2 => {\n\n    return [\n        [-1, 0],\n        [0, -1],\n    ];\n};\n\n/**\n * Reflection about the origin.\n */\nexport const m2ReflectionOriginH = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, -1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection about the origin in non-homogeneous coordinates\n */\nexport const m3ReflectionOrigin = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, -1, 0],\n        [0, 0, -1],\n    ];\n};\n\n/**\n * Reflection about the origin in homogeneous coordinates\n */\nexport const m3ReflectionOriginH = (): Matrix4 => {\n\n    return [\n        [-1, 0, 0, 0],\n        [0, -1, 0, 0],\n        [0, 0, -1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Reflection about y=-x\n */\nexport const m2ReflectionYmX = (): Matrix2 => {\n\n    return [\n        [0, -1],\n        [-1, 0],\n    ];\n};\n\n/**\n * Reflection in the x-axis.\n */\nexport const m2ReflectionX = (): Matrix2 => {\n\n    return [\n        [1, 0],\n        [0, -1],\n    ];\n};\n\n/**\n * Reflection in the x-axis.\n */\nexport const m2ReflectionXH = (): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection in the y-axis.\n */\nexport const m2ReflectionY = (): Matrix2 => {\n\n    return [\n        [-1, 0],\n        [0, 1],\n    ];\n};\n\nexport const m2ReflectionYH = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to YZ plane in non-homogeneous coordinates\n */\nexport const m3ReflectionYZ = (): Matrix3 => {\n\n    return [\n        [-1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to YZ plane in homogeneous coordinates\n */\nexport const m3ReflectionYZH = (): Matrix4 => {\n\n    return [\n        [-1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to XZ plane in non-homogeneous coordinates\n */\nexport const m3ReflectionXZ = (): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, -1, 0],\n        [0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to XZ plane in homogeneous coordinates\n */\nexport const m3ReflectionXZH = (): Matrix4 => {\n\n    return [\n        [1, 0, 0, 0],\n        [0, -1, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n/**\n * Reflection relative to XY plane in non-homogeneous coordinates\n */\nexport const m3ReflectionXY = (): Matrix3 => {\n\n    return [\n        [1, 0, 0],\n        [0, 1, 0],\n        [0, 0, -1],\n    ];\n};\n\n/**\n * Reflection relative to XY plane in homogeneous coordinates\n */\nexport const m3ReflectionXYH = (): Matrix4 => {\n\n    return [\n        [1, 0, 0, 0],\n        [0, 1, 0, 0],\n        [0, 0, -1, 0],\n        [0, 0, 0, 1],\n    ];\n};\n\n// ---------------- SHEARING MATRICES -------------------------\n\n\n/**\n * Shearing in y-axis, with x-axis fixed with (0,1) moving to (factor, 1)\n */\nexport const m2ShearingY = (factor: number): Matrix2 => {\n\n    return [\n        [1, factor],\n        [0, 1],\n    ];\n};\n\n/**\n * Shearing in x-axis, with y-axis fixed with (1,0) moving to (1, factor)\n */\nexport const m2ShearingX = (factor: number): Matrix2 => {\n\n    return [\n        [1, 0],\n        [factor, 1],\n    ];\n};", "import { setDecimalPlaces } from './format';\n\n/**\n * Returns a random number in the [min,max] range.\n */\nexport const getRandom = (min: number, max: number, decimalPlaces = Infinity): number => {\n    return setDecimalPlaces(Math.random() * (max - min) + min, decimalPlaces);\n};\n\n/**\n * Returns a random integer number in the [min,max] range.\n */\nexport const getRandomInt = (min: number, max: number): number => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const getRandomBoolean = () => Math.random() < 0.5;\n\n/* eslint-disable  @typescript-eslint/no-explicit-any */\nexport const getRandomItemFromArray = (array: any[]) => {\n    const randomIndex = getRandomInt(0, array.length - 1);\n    return array[randomIndex];\n};", "export const stringToNumber = (value: string|undefined|null|number, defaultNumber: number) => {\n    if(value === undefined || value === null) return defaultNumber;\n    const res = Number(value) ?? defaultNumber;\n    return isNaN(res) ? defaultNumber : res;\n};", "import { setDecimalPlaces } from './format';\nimport { Vector2, Vector3 } from '../types';\n\n/**\n * u(x) and v(x) are functions ---------->\n *\n * dx(u + v) = dx(u) + dx(v)\n * dx(u - v) = dx(u) - dx(v)\n * dx(u * v) = dx(u) * v + u * dx(v)\n * dx(u / v) = (dx(u) * v - u * dx(v)) / (v ^ 2), when v(x) != 0\n */\n\n// ------------------ Derivatives of Polynomial ---------------------------\n\n/**\n * y = 3x+2\n * dxPolynomial(10, [[3, 1], [2, 0]])\n */\nexport const dxPolynomial = (x: number, polynomial: number[][], decimalPlaces = Infinity) => {\n    let res = 0;\n\n    for(const part of polynomial){\n        if(part.length !== 2) return NaN;\n\n        const coeff = part[0];\n        const power = part[1];\n        res += coeff * power * Math.pow(x, power - 1);\n    }\n\n    return setDecimalPlaces(res, decimalPlaces);\n}\n\n// ---------------------- Bezier Curves ---------------------------\n\n/**\n * Derivative of Bezier Curve is another Bezier Curve.\n * t must min in range [0, 1]\n */\nexport const dxV2QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    // The derivative: P1 * (2t-2) + (2*P3-4*P2) * t + 2 * P2\n\n    const temp1 = -2 * (1 - t); // Math.pow(1 - t, 2)\n    const temp2 = 2 - 4 * t; // (1 - t) * 2 * t\n    const temp3 = 2 * t; //t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const dxV3QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = -2 * (1 - t); // Math.pow(1 - t, 2)\n    const temp2 = 2 - 4 * t; // (1 - t) * 2 * t\n    const temp3 = 2 * t; //t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * centerControlPoint[2] + temp3 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\nexport const dxV2CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const temp1 = -3 * Math.pow(1 - t, 2); //Math.pow(1 - t, 3);\n    const temp2 = 3 * (t - 1) * (3 * t - 1); //Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = 6 * t - 9 * t * t; // (1 - t) * 3 * t * t;\n    const temp4 = 3 * t * t; //t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const dxV3CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = -3 * Math.pow(1 - t, 2); //Math.pow(1 - t, 3);\n    const temp2 = 3 * (t - 1) * (3 * t - 1); //Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = 6 * t - 9 * t * t; // (1 - t) * 3 * t * t;\n    const temp4 = 3 * t * t; //t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * center1ControlPoint[2] + temp3 * center2ControlPoint[2] + temp4 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\n\n// ----------------- Derivatives of trigonometry functions ---------------------------\n\nexport const dxSin = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(Math.cos(x), decimalPlaces);\n};\n\nexport const dxCos = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-Math.sin(x), decimalPlaces);\n};\n\nexport const dxTan = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(1 / (Math.cos(x) ** 2), decimalPlaces);\n};\n\n/**\n * x != Math.PI * n, where n is an integer\n */\nexport const dxCot = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-1 / (Math.sin(x) ** 2), decimalPlaces);\n};\n\n/**\n * -1 < x < 1\n */\nexport const dxArcSin = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(1 / (Math.sqrt(1 - x ** 2)), decimalPlaces);\n};\n\n/**\n * -1 < x < 1\n */\nexport const dxArcCos = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-1 / (Math.sqrt(1 - x ** 2)), decimalPlaces);\n};\n\nexport const dxArcTan = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(1 / (1 + x ** 2), decimalPlaces);\n};\n\nexport const dxArcCot = (x: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(-1 / (1 + x ** 2), decimalPlaces);\n};\n", "import { Matrix, Matrix2, Matrix3, Vector, Vector2, Vector3 } from '../../types';\nimport { m2Inverse, m3Inverse, mInverse, mMulVector, mDelLastColumn, mGetLastColumn } from '../linear-algebra/matrix';\nimport { setDecimalPlaces } from '../format';\nimport { v2Sub } from '../linear-algebra/vector';\n\n/**\n * Linear equation\n * ax + b = c\n * x = (c - b) / a; a != 0\n */\nexport const linearEquation = (equation: Vector3, decimalPlaces = Infinity) : number => {\n    const a = equation[0];\n    const b = equation[1];\n    const c = equation[2];\n\n    const diff = c - b;\n\n    if(a === 0 && diff === 0) return Infinity; // any number is a solution\n    if(a === 0) return NaN; // no solution\n\n    return setDecimalPlaces(diff / a, decimalPlaces);\n};\n\n/**\n * System of 2 linear equations.\n * [x, y] = inverse(Matrix of equation parameters) x (vector of equation results)\n * ---------------\n * 3x + 2y = 7\n * -6x + 6y = 6\n */\nexport const linearEquationSystem2 = (equation1: Vector3, equation2: Vector3, decimalPlaces = Infinity) : Vector2 | null => {\n    const equationParams: Matrix2 = [\n        [equation1[0], equation1[1]],\n        [equation2[0], equation2[1]],\n    ];\n\n    const inversed = m2Inverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    const equationResults: Vector2 = [\n        equation1[2],\n        equation2[2]\n    ];\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector2;\n};\n\n/**\n * System of 3 linear equations.\n * ---------------------------------------\n * 3x + 2y + 5z = 7\n * -6x + 6y + 6z = 6\n * 2x + 7y - z = 4\n */\nexport const linearEquationSystem3 = (\n    equation1: Vector,\n    equation2: Vector,\n    equation3: Vector,\n    decimalPlaces = Infinity) : Vector3 | null => {\n    const equationParams: Matrix3 = [\n        [equation1[0], equation1[1], equation1[2]],\n        [equation2[0], equation2[1], equation2[2]],\n        [equation3[0], equation3[1], equation3[2]],\n    ];\n\n    const inversed = m3Inverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    const equationResults: Vector3 = [\n        equation1[3],\n        equation2[3],\n        equation3[3]\n    ];\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector3;\n};\n\n/**\n * System of N linear equations.\n */\nexport const linearEquationSystemN = (equations: Matrix, decimalPlaces = Infinity) : Vector | null => {\n    if(equations.length <= 0) return null;\n\n    const equationParams = mDelLastColumn(equations);\n\n    const inversed = mInverse(equationParams);\n    if(inversed === null) return null; // no results\n\n    // the last column of the equations matrix\n    const equationResults = mGetLastColumn(equations);\n\n    return mMulVector(inversed, equationResults, decimalPlaces) as Vector;\n};\n\n/**\n * Calculate the equation of a line given two points in a 2D space.\n * y = ax + b\n * y - y1 = m(x - x1)\n * m = (y2 - y1) / (x2 - x1)\n */\nexport const getLinearEquationBy2Points = (point1: Vector2, point2: Vector2) : {\n    slope: number|undefined,\n    yIntercept: number|undefined,\n    xIntercept: number|undefined,\n    formula: string,\n} => {\n    const [deltaX, deltaY] = v2Sub(point2, point1);\n    const [x, y] = point1;\n\n    if(deltaX === 0) {\n        return {\n            slope: undefined,\n            xIntercept: x,\n            yIntercept: undefined,\n            formula: `x = ${ x }`,\n        };\n    }\n\n    const m = deltaY / deltaX;\n    const b = y - m * x;\n    let formula = '';\n\n    if(m === 0) {\n        formula = `y = ${ b }`;\n    }\n    else{\n        formula = `y = ${ m === 1 ? '' : m }x`;\n\n        if(b !== 0) {\n            formula += ` ${ b < 0 ? '-' : '+' } ${ Math.abs(b) }`;\n        }\n    }\n\n    return {\n        slope: m,\n        xIntercept: undefined,\n        yIntercept: b,\n        formula,\n    };\n};", "import { Vector } from '../../types';\nimport { setDecimalPlaces } from '../format';\nimport { linearEquation } from './linear-equations';\nimport { isNumber } from '../other';\n\n/**\n * Quadratic Equation.\n * ax^2 + bx + c = d\n */\nexport const quadraticEquation = (equation: Vector, decimalPlaces = Infinity) : Vector => {\n    const a = equation[0];\n    const b = equation[1];\n    const c = equation[2];\n    const d = equation[3];\n\n    if(a === 0){\n        // it's a linear equation -------------------------------------------\n        const res = linearEquation([b, c, d], decimalPlaces);\n        if(isNumber(res)) return [res];\n        return [];\n    }\n\n    const diff = c - d;\n\n    const discriminant = b * b - (4 * a * diff);\n\n    if(discriminant < 0){\n        return []; // no results\n    }\n\n    if(discriminant === 0){\n        return [ setDecimalPlaces(-b / (2 * a), decimalPlaces) ]; // 1 result\n    }\n\n    // if(determinant > 0) ---> 2 results\n    const t1 = 2 * a;\n    const t2 = Math.sqrt(discriminant);\n\n    return [\n        setDecimalPlaces((-b + t2) / t1, decimalPlaces),\n        setDecimalPlaces((-b - t2) / t1, decimalPlaces),\n    ];\n};", "import { IBBox, Vector, Vector2, Vector3 } from '../../types';\nimport { setDecimalPlaces } from '../format';\nimport {\n    dxV2CubicBezierCurve,\n    dxV2QuadraticBezierCurve,\n    dxV3CubicBezierCurve,\n    dxV3QuadraticBezierCurve\n} from '../derivative';\nimport { v2Normalize, v3Normalize } from '../linear-algebra/vector';\nimport { linearEquation } from '../equations/linear-equations';\nimport { quadraticEquation } from '../equations/quadratic-equations';\nimport { isNumber } from '../other';\n\n/**\n * B\u00E9zier Curves\n * quadratic: y = P1 * (1-t)\u00B2 + P2 * 2 * (1-t)t + P3 * t\u00B2\n * t in range [0, 1]\n */\n\n// -------------------- GET POINT ON CURVE --------------------------\n\n/**\n * Get a point on a quadratic B\u00E9zier curve as a function of time.\n */\nexport const v2QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const temp1 = Math.pow(1 - t, 2);\n    const temp2 = (1 - t) * 2 * t;\n    const temp3 = t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const v3QuadraticBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = Math.pow(1 - t, 2);\n    const temp2 = (1 - t) * 2 * t;\n    const temp3 = t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * centerControlPoint[0] + temp3 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * centerControlPoint[1] + temp3 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * centerControlPoint[2] + temp3 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\n/**\n * Get a point on a cubic B\u00E9zier curve as a function of time.\n */\nexport const v2CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const temp1 = Math.pow(1 - t, 3);\n    const temp2 = Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = (1 - t) * 3 * t * t;\n    const temp4 = t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n    ];\n};\n\nexport const v3CubicBezierCurve = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n\n    const temp1 = Math.pow(1 - t, 3);\n    const temp2 = Math.pow(1 - t, 2) * 3 * t;\n    const temp3 = (1 - t) * 3 * t * t;\n    const temp4 = t * t * t;\n\n    return [\n        setDecimalPlaces(temp1 * startControlPoint[0] + temp2 * center1ControlPoint[0] + temp3 * center2ControlPoint[0] + temp4 * endControlPoint[0], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[1] + temp2 * center1ControlPoint[1] + temp3 * center2ControlPoint[1] + temp4 * endControlPoint[1], decimalPlaces),\n        setDecimalPlaces(temp1 * startControlPoint[2] + temp2 * center1ControlPoint[2] + temp3 * center2ControlPoint[2] + temp4 * endControlPoint[2], decimalPlaces),\n    ];\n};\n\n// -------------------- TANGENT --------------------------\n\n/**\n * Tangent indicates the direction of travel at specific points along the B\u00E9zier curve,\n * and is literally just the first derivative of our curve.\n */\nexport const v2QuadraticBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n    const dxVector = dxV2QuadraticBezierCurve(t, startControlPoint, centerControlPoint, endControlPoint);\n    return v2Normalize(dxVector, decimalPlaces);\n};\n\nexport const v3QuadraticBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector3,\n    centerControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n    const dxVector = dxV3QuadraticBezierCurve(t, startControlPoint, centerControlPoint, endControlPoint);\n    return v3Normalize(dxVector, decimalPlaces);\n};\n\nexport const v2CubicBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n    const dxVector = dxV2CubicBezierCurve(t, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint);\n    return v2Normalize(dxVector, decimalPlaces);\n};\n\nexport const v3CubicBezierCurveTangent = (\n    t: number,\n    startControlPoint: Vector3,\n    center1ControlPoint: Vector3,\n    center2ControlPoint: Vector3,\n    endControlPoint: Vector3,\n    decimalPlaces = Infinity\n) : Vector3 => {\n    const dxVector = dxV3CubicBezierCurve(t, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint);\n    return v3Normalize(dxVector, decimalPlaces);\n};\n\n// -------------------- NORMAL --------------------------\n\n/**\n * Normal is a vector that runs at a right angle to the direction of the curve, and is typically of length 1.\n * To find it, we take the normalised tangent vector, and then rotate it by a 90 degrees.\n */\nexport const v2QuadraticBezierCurveNormal = (\n    t: number,\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const tangent = v2QuadraticBezierCurveTangent(t, startControlPoint, centerControlPoint, endControlPoint, decimalPlaces);\n    return [-tangent[1], tangent[0]];\n};\n\nexport const v2CubicBezierCurveNormal = (\n    t: number,\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2 => {\n\n    const tangent = v2CubicBezierCurveTangent(t, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint, decimalPlaces);\n    return [-tangent[1], tangent[0]];\n};\n\n// -------------------- EXTREMA --------------------------\n\n/**\n * Find maxima and minima by solving the equation B'(t) = 0\n * Returns result in [0, 1] range.\n */\nexport const v2QuadraticBezierCurveExtrema = (\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector => {\n\n   /*\n    (-2 * (1 - t)) * startControlPoint[0] + (2 - 4 * t) * centerControlPoint[0] + (2 * t) * endControlPoint[0]\n    2 * t * startControlPoint[0] - 4 * t * centerControlPoint[0] + 2 * t * endControlPoint[0] - 2 * startControlPoint[0] + 2 * centerControlPoint[0]\n    t * (2  * startControlPoint[0] - 4 * centerControlPoint[0] + 2 * endControlPoint[0]) + (- 2 * startControlPoint[0] + 2 * centerControlPoint[0])\n    */\n\n    const a1 = 2  * startControlPoint[0] - 4 * centerControlPoint[0] + 2 * endControlPoint[0];\n    const b1 = -2 * startControlPoint[0] + 2 * centerControlPoint[0];\n    const equation1: Vector3 = [a1, b1, 0];\n    const res1 = linearEquation(equation1, decimalPlaces);\n\n    const a2 = 2  * startControlPoint[1] - 4 * centerControlPoint[1] + 2 * endControlPoint[1];\n    const b2 = -2 * startControlPoint[1] + 2 * centerControlPoint[1];\n    const equation2: Vector3 = [a2, b2, 0];\n    const res2 = linearEquation(equation2, decimalPlaces);\n\n    const res: Vector = [];\n\n    if(isNumber(res1)){\n        res.push(res1);\n    }\n\n    if(isNumber(res2)){\n        res.push(res2);\n    }\n\n    return res;\n};\n\n/**\n * Find maxima and minima by solving the equation B'(t) = 0\n * Returns result in [0, 1] range.\n */\nexport const v2CubicBezierCurveExtrema = (\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : Vector2|null => {\n\n    const a1 = -3  * startControlPoint[0] + 9 * center1ControlPoint[0] - 9 * center2ControlPoint[0] + 3 * endControlPoint[0];\n    const b1 = 6  * startControlPoint[0] - 12 * center1ControlPoint[0] + 6 * center2ControlPoint[0];\n    const c1 = -3  * startControlPoint[0] + 3 * center1ControlPoint[0];\n    const equation1: Vector = [a1, b1, c1, 0];\n\n    const a2 = -3  * startControlPoint[1] + 9 * center1ControlPoint[1] - 9 * center2ControlPoint[1] + 3 * endControlPoint[1];\n    const b2 = 6  * startControlPoint[1] - 12 * center1ControlPoint[1] + 6 * center2ControlPoint[1];\n    const c2 = -3  * startControlPoint[1] + 3 * center1ControlPoint[1];\n    const equation2: Vector = [a2, b2, c2, 0];\n\n    // Any value between 0 and 1 is a root that matters for B\u00E9zier curves, anything below or above that is irrelevant (because B\u00E9zier curves are only defined over the interval [0,1]).\n    const res1 = quadraticEquation(equation1, decimalPlaces).filter(num => num >= 0 && num <= 1);\n    const res2 = quadraticEquation(equation2, decimalPlaces).filter(num => num >= 0 && num <= 1);\n\n    const res = [...res1, ...res2];\n    if(res.length === 2){\n        return [...res1, ...res2] as Vector2;\n    }\n\n    return null;\n};\n\n// -------------------- BOUNDING BOX --------------------------\n\nexport const v2QuadraticBezierBBox = (\n    startControlPoint: Vector2,\n    centerControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : IBBox => {\n\n    const extrema = v2QuadraticBezierCurveExtrema(startControlPoint, centerControlPoint, endControlPoint);\n\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n\n    for(const percent of extrema){\n        const point = v2QuadraticBezierCurve(percent, startControlPoint, centerControlPoint, endControlPoint);\n\n        const x = point[0];\n        const y = point[1];\n\n        minX = Math.min(minX, x);\n        maxX = Math.max(maxX, x);\n\n        minY = Math.min(minY, y);\n        maxY = Math.max(maxY, y);\n    }\n\n    minX = setDecimalPlaces(Math.min(minX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    maxX = setDecimalPlaces(Math.max(maxX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    minY = setDecimalPlaces(Math.min(minY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n    maxY = setDecimalPlaces(Math.max(maxY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n\n    return {\n        x: minX,\n        y: minY,\n        w: Math.abs(maxX - minX),\n        h: Math.abs(maxY - minY),\n        x2: maxX,\n        y2: maxY,\n    }\n};\n\nexport const v2CubicBezierBBox = (\n    startControlPoint: Vector2,\n    center1ControlPoint: Vector2,\n    center2ControlPoint: Vector2,\n    endControlPoint: Vector2,\n    decimalPlaces = Infinity\n) : IBBox => {\n\n    const extrema = v2CubicBezierCurveExtrema(startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint) || [];\n\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n\n    for(const percent of extrema){\n        const point = v2CubicBezierCurve(percent, startControlPoint, center1ControlPoint, center2ControlPoint, endControlPoint);\n\n        const x = point[0];\n        const y = point[1];\n\n        minX = Math.min(minX, x ?? Infinity);\n        maxX = Math.max(maxX, x ?? -Infinity);\n\n        minY = Math.min(minY, y ?? Infinity);\n        maxY = Math.max(maxY, y ?? -Infinity);\n    }\n\n    minX = setDecimalPlaces(Math.min(minX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    maxX = setDecimalPlaces(Math.max(maxX, startControlPoint[0], endControlPoint[0]), decimalPlaces);\n    minY = setDecimalPlaces(Math.min(minY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n    maxY = setDecimalPlaces(Math.max(maxY, startControlPoint[1], endControlPoint[1]), decimalPlaces);\n\n    return {\n        x: minX,\n        y: minY,\n        w: Math.abs(maxX - minX),\n        h: Math.abs(maxY - minY),\n        x2: maxX,\n        y2: maxY,\n    }\n};\n\n\n", "import { Vector2 } from '../types';\nimport { v2Sub } from './linear-algebra/vector';\nimport { getV2Angle } from './angle';\nimport { convertRange } from './other';\n\n/**\n * Circle Equation\n * x^2 + y^2 = radius^2\n * ----------------------\n * Circle Parametric Equation\n * x(t) = radius * cos(t)\n * y(t) = radius * sin(t)\n * t is the parameter = angle\n *\n * Angle should be in the range [0, Math.PI]\n */\nexport const circleMovement = (center: Vector2, angle: number, radius: number): Vector2 => {\n    angle = angle % Math.PI * 2;\n\n    return [\n        center[0] + Math.cos(angle) * radius,\n        center[1] + Math.sin(angle) * radius\n    ];\n};\n\n/**\n * Circle Movement After Mouse.\n * Mouse Positions:\n * - pageX/Y coordinates are relative to the top left corner of the whole rendered page (including parts hidden by scrolling),\n * - screenX and screenY: Relative to the top left of the physical screen/monitor, this reference point only moves if you increase or decrease the number of monitors or the monitor resolution.\n * - clientX/Y coordinates are relative to the top left corner of the visible part of the page, \"seen\" through browser window.\n * - offsetX and offsetY are relative to the parent container,\n */\nexport const circleMovementAfterMouse = (\n    mouse: Vector2,\n    center: Vector2,\n    radius: number\n): Vector2 => {\n\n    const vector = v2Sub(mouse, center);\n\n    let angle = getV2Angle(vector);\n\n    // convert the angle from the range [0, Math.PI*2] to the range [0, Math.PI]\n    angle = convertRange(angle, 0, Math.PI*2, 0, Math.PI);\n\n    return circleMovement(center, angle, radius);\n};\n\n/**\n * Ellipse Equation\n * (x - centerX)^2 / (radius1^2) + (y - centerY)^2 / (radius2^2) = 1\n * -----------------------------------------------------------------\n * Ellipse Parametric Equation\n * x(t) = radius1 * cos(t)\n * y(t) = radius2 * sin(t)\n * t is the parameter = angle\n *\n * Angle should be in the range [0, Math.PI]\n */\nexport const ellipseMovement = (center: Vector2, angle: number, radius1: number, radius2: number): Vector2 => {\n    angle = angle % Math.PI * 2;\n\n    return [\n        center[0] + Math.cos(angle) * radius1,\n        center[1] + Math.sin(angle) * radius2\n    ];\n};\n\n/**\n * Ellipse Movement After Mouse.\n * Mouse Positions:\n * - pageX/Y coordinates are relative to the top left corner of the whole rendered page (including parts hidden by scrolling),\n * - screenX and screenY: Relative to the top left of the physical screen/monitor, this reference point only moves if you increase or decrease the number of monitors or the monitor resolution.\n * - clientX/Y coordinates are relative to the top left corner of the visible part of the page, \"seen\" through browser window.\n * - offsetX and offsetY are relative to the parent container,\n */\nexport const ellipseMovementAfterMouse = (\n    mouse: Vector2,\n    center: Vector2,\n    radii: Vector2\n): Vector2 => {\n\n    const vector = v2Sub(mouse, center);\n\n    let angle = getV2Angle(vector);\n\n    // convert the angle from the range [0, Math.PI*2] to the range [0, Math.PI]\n    angle = convertRange(angle, 0, Math.PI*2, 0, Math.PI);\n\n    return ellipseMovement(center, angle, radii[0], radii[1]);\n};\n\n/**\n * Sine Wave Equation (Sinusoid)\n * -----------------------------\n * const y = amplitude * Math.sin(2 * Math.PI * frequency * x + phase);\n * amplitude = the peak deviation of the function from zero\n * frequency = number of cycles\n * phase = specifies (in radians) where in its cycle the oscillation is at t = 0.\n * think of it as \"shifting\" the starting point of the function to the right (positive p) or left (negative)\n */\nexport const sineWaveMovement = (x: number, amplitude: number, frequency: number, phase: number) : Vector2 => {\n    /*\n    example values:\n    const amplitude = 50;\n    const frequency = 0.005;\n    const phase = 0;\n    x: [0, 1000]\n     */\n    const y = amplitude * Math.sin(2 * Math.PI * frequency * x + phase);\n\n    return [x, y];\n};\n\n/**\n * Lissajous curve (Lissajous figure or Bowditch curve)\n * Parametric equation #1\n * f(t) = A * sin(k * t + m)\n * f(t) = B * sin(n * t)\n * 0 <= m <= PI/2\n * k, n >= 1\n * -----------------------\n * Parametric equation #2\n * f(t) = A * cos(k * t - m)\n * f(t) = B * cos(n * t - p)\n * -----------------------------\n * Shapes:\n * k = 1, n = 1, m = 0, p = 0 ---> line\n * A = B,  k = 1, n = 1, m = PI/2, p = PI/2 ----> circle\n * A != B, k = 1, n = 1, m = PI/2, p = PI/2 ----> ellipse\n * k = 2, n = 2, m = PI/2, p = PI/2 ----> section of a parabola\n */\nexport const lissajousCurve = (\n    width: number,\n    height: number,\n    t: number,\n    k: number,\n    n: number,\n    m: number,\n    p: number\n) :Vector2 => {\n    return [\n        width * Math.cos(k * t - m),\n        height * Math.cos(n * t - p),\n    ];\n};\n", "import { getRandom } from './random';\nimport { HSLColor, RGBColor } from '../types';\nimport { mod } from './other';\nimport { setDecimalPlaces } from './format';\n\n// ------------------------ RANDOM COLOR -------------------------------------\n\nexport const getRandomRGBColor = () : RGBColor => {\n    const hslColor = getRandomHSLColor();\n    return hslToRgb(hslColor);\n};\n\nexport const getRandomHexColor = () : string => {\n    const hslColor = getRandomHSLColor();\n    return hslToHex(hslColor);\n};\n\nexport const getRandomHSLColor = () : HSLColor => {\n    const h = getRandom(1, 360);\n    const s = getRandom(0, 100);\n    const l = getRandom(0, 100);\n    return [h, s, l];\n};\n\n/**\n * generate random color with the given hue\n */\nexport const getRandomHSLColorWithHue = (h: number) : HSLColor => {\n    const s = getRandom(0, 100);\n    const l = getRandom(0, 100);\n    return [h, s, l];\n};\n\n/**\n * generate random color with the given saturation\n */\nexport const getRandomHSLColorWithSaturation = (s: number) : HSLColor => {\n    const h = getRandom(1, 360);\n    const l = getRandom(0, 100);\n    return [h, s, l];\n};\n\n/**\n * generate random color with the given lightness\n */\nexport const getRandomHSLColorWithLightness = (l: number) : HSLColor => {\n    const h = getRandom(1, 360);\n    const s = getRandom(0, 100);\n    return [h, s, l];\n};\n\nexport const getRandomGrayscaleHSLColor = () : HSLColor => {\n    const l = getRandom(0, 100);\n    return [0, 0, l];\n};\n\nexport const getRandomHSLColorWithinRanges = (\n    hueStart = 1, hueEnd = 360,\n    saturationStart = 0, saturationEnd = 100,\n    lightStart = 0, lightEnd = 100\n) : HSLColor => {\n    const h = getRandom(hueStart, hueEnd);\n    const s = getRandom(saturationStart, saturationEnd);\n    const l = getRandom(lightStart, lightEnd);\n    return [h, s, l];\n};\n\n// ----------------------- CONVERT COLORS --------------------------------------\n\n/**\n * helper: convert hue value to %\n * @param {number} h\n * @return {number} [0, 100] %\n */\nconst convertHueToPercent = (h : number) : number => {\n\n    // the hue value needs to be multiplied by 60 to convert it to degrees\n    h *= 60;\n\n    // if hue becomes negative, you need to add 360 to, because a circle has 360 degrees\n    if(h < 0){\n        h += 360;\n    }\n\n    // convert huw to %\n    return h * 100 / 360;\n};\n\n/**\n * get hue from RGB\n * @param {number} r [0, 255]\n * @param {number} g [0, 255]\n * @param {number} b [0, 255]\n * @param {number|undefined=} min - min number of [r, g, b]\n * @param {number|undefined=} max - max number of [r, g, b]\n * @return {number} [0, 100] % - we use here % instead of [0, 359] degrees\n */\nconst getHue = (r : number, g : number, b : number, min : number | undefined = undefined, max : number | undefined = undefined) : number => {\n\n    // find the minimum and maximum values of r, g, and b if they are not provided\n    min = (min === undefined) ? Math.min(r, g, b) : min;\n    max = (min === undefined) ? Math.max(r, g, b) : max;\n\n    // if the min and max value are the same -> no hue, as it's gray\n    if(min === max) return 0;\n\n    // if red is max\n    if(max === r){\n        return convertHueToPercent((g - b) / (max - min));\n    }\n\n    // if green is max\n    if(max === g){\n        return convertHueToPercent(2.0 + (b - r) / (max - min));\n    }\n\n    // if blue is max\n    if(max === b){\n        return convertHueToPercent(4.0 + (r - g) / (max - min));\n    }\n\n    return 0;\n};\n\n/**\n * get luminance from RGB\n * @param {number} r [0, 255]\n * @param {number} g [0, 255]\n * @param {number} b [0, 255]\n * @param {number|undefined=} min - min number of [r, g, b]\n * @param {number|undefined=} max - max number of [r, g, b]\n * @return {number} [0, 100] %\n */\nconst getLuminance = (\n    r : number,\n    g : number,\n    b : number,\n    min : number | undefined = undefined,\n    max : number | undefined = undefined) : number => {\n\n    // find the minimum and maximum values of r, g, and b if they are not provided\n    min = (min === undefined) ? Math.min(r, g, b) : min;\n    max = (min === undefined) ? Math.max(r, g, b) : max;\n\n    // calculate the luminance value\n    // @ts-ignore\n    const l = (min + max) / 2; // [0, 1]\n\n    // return l value in %\n    return l * 100;\n};\n\n/**\n * get saturation from RGB\n * @param {number} r [0, 255]\n * @param {number} g [0, 255]\n * @param {number} b [0, 255]\n * @param {number|undefined=} min - min number of [r, g, b]\n * @param {number|undefined=} max - max number of [r, g, b]\n * @param {number|undefined=} l - luminance in [0, 100] %\n * @return {number} [0, 100] %\n */\nconst getSaturation = (\n    r : number,\n    g : number,\n    b : number,\n    min : number | undefined = undefined,\n    max : number | undefined = undefined,\n    l : number | undefined = undefined) : number => {\n\n    // find the minimum and maximum values of r, g, and b if they are not provided\n    min = (min === undefined) ? Math.min(r, g, b) : min;\n    max = (min === undefined) ? Math.max(r, g, b) : max;\n\n    // if the min and max value are the same -> no saturation, as it's gray\n    if(min === max) return 0;\n\n    // calculate luminance if it's not provided\n    l = (l === undefined) ? getLuminance(r, g, b) : l;\n\n    // check the level of luminance\n    const s = (l <= 50) ?\n        // @ts-ignore\n        ((max - min) / (max + min)) : // this formula is used when luminance <= 50%\n        // @ts-ignore\n        (max - min) / (2.0 - max - min);  // this formula is used when luminance > 50%\n\n    // return saturation in %\n    return s * 100;\n};\n\nexport const rgbToHsl = (rgb: RGBColor, decimalPlaces = Infinity): HSLColor => {\n\n    // convert rgb values to the range [0, 1]\n    const r = rgb[0] / 255;\n    const g = rgb[1] / 255;\n    const b = rgb[2] / 255;\n\n    // find the minimum and maximum values of r, g, and b\n    const min = Math.min(r, g, b);\n    const max = Math.max(r, g, b);\n\n    // calculate the luminance value in %\n    const l = getLuminance(r, g, b, min, max);\n\n    // calculate the saturation in %\n    const s = getSaturation(r, g, b, min, max, l);\n\n    // calculate the hue in % (not in degrees!)\n    const h = getHue(r, g, b, min, max);\n\n    if(h > 360 || s > 100 || l > 100){\n        return [0, 0, 100];\n    }\n\n    if(h < 0 || s < 0 || l < 0){\n        return [0, 0, 0];\n    }\n\n    return [\n        setDecimalPlaces(h, decimalPlaces),\n        setDecimalPlaces(s, decimalPlaces),\n        setDecimalPlaces(l, decimalPlaces),\n    ];\n};\n\n/**\n * helper: HSL to RGB\n */\nconst hslToRgbHelper = (helper1 : number, helper2 : number, colorHelper : number) : number => {\n\n    // all values need to be between 0 and 1\n    // if you get a negative value you need to add 1 to it\n    if(colorHelper < 0) colorHelper += 1;\n\n    // if you get a value above 1 you need to subtract 1 from it.\n    if(colorHelper > 1) colorHelper -= 1;\n\n    if(colorHelper * 6 < 1) return helper2 + (helper1 - helper2) * 6 * colorHelper;\n\n    if(colorHelper * 2 < 1) return helper1;\n\n    if(colorHelper * 3 < 2){\n        return helper2 + (helper1 - helper2) * (0.666 - colorHelper) * 6;\n    }\n    else{\n        return helper2;\n    }\n};\n\nexport const hslToRgb = (hsl: HSLColor, decimalPlaces = Infinity): RGBColor => {\n\n    // convert all values to [0, 1] from %\n    const h = hsl[0] / 100;\n    const s = hsl[1] / 100;\n    const l = hsl[2] / 100;\n\n    // if there is no saturation -> it\u2019s grey\n    if(s === 0){\n        // convert the luminance from [0, 1] to [0, 255]\n        const gray = l * 255;\n        return [gray, gray, gray];\n    }\n\n    // check the level of luminance\n    const helper1 = (l < 0.5) ?\n        (l * (1.0 + s)) :\n        (l + s - l * s);\n\n    const helper2 = 2 * l - helper1;\n\n    const rHelper = h + 0.333;\n    const gHelper = h;\n    const bHelper = h - 0.333;\n\n    let r = hslToRgbHelper(helper1, helper2, rHelper);\n    let g = hslToRgbHelper(helper1, helper2, gHelper);\n    let b = hslToRgbHelper(helper1, helper2, bHelper);\n\n    // convert rgb to [0, 255]\n    r *= 255;\n    g *= 255;\n    b *= 255;\n\n    if(r > 255 || g > 255 || b > 255){\n        return [255, 255, 255];\n    }\n\n    if(r < 0 || g < 0 || b < 0){\n        return [0, 0, 0];\n    }\n\n    return [\n        setDecimalPlaces(r, decimalPlaces),\n        setDecimalPlaces(g, decimalPlaces),\n        setDecimalPlaces(b, decimalPlaces),\n    ];\n};\n\n/**\n * HSL to hex\n * hslToHex(360, 100, 50)  // [360, 100, 5] ==> \"#ff0000\" (red)\n */\nexport const hslToHex = (hsl: HSLColor) => {\n\n    if(hsl[0] > 360 || hsl[1] > 100 || hsl[2] > 100){\n        return '#ffffff';\n    }\n\n    if(hsl[0] < 0 || hsl[1] < 0 || hsl[2] < 0){\n        return '#000000';\n    }\n\n    const h = hsl[0] / 360;\n    const s = hsl[1] / 100;\n    const l = hsl[2] / 100;\n\n    let r, g, b;\n    if (s === 0) {\n        r = g = b = l; // achromatic\n    } else {\n        const hue2rgb = (p: number, q: number, t: number) => {\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p) * 6 * t;\n            if (t < 1 / 2) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        };\n        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        const p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n    }\n    const toHex = (x: number) => {\n        const hex = Math.round(x * 255).toString(16);\n        return hex.length === 1 ? '0' + hex : hex;\n    };\n\n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n};\n\n// ----------------------- GET SHIFTED COLORS --------------------------------------\n\nexport const getShiftedHue = (color: HSLColor, shift = 180) : HSLColor => {\n    let hue = color[0];\n    hue += shift;\n\n    if (hue > 360 || hue < 0) {\n        hue = mod(hue, 360);\n    }\n\n    return [hue, color[1], color[2]];\n};\n\nexport const getShiftedLightness = (color: HSLColor, shift = 10) : HSLColor => {\n    let lightness = color[2];\n    lightness += shift;\n\n    if (lightness > 100 || lightness < 0) {\n        lightness = mod(lightness, 100);\n    }\n\n    return [color[0], color[1], lightness];\n};\n\nexport const getShiftedSaturation = (color: HSLColor, shift = 10) : HSLColor => {\n    let saturation = color[1];\n    saturation += shift;\n\n    if (saturation > 100) {\n        saturation -= 100;\n    }\n\n    if(saturation < 0){\n        saturation += 100;\n    }\n\n    return [color[0], saturation, color[2]];\n};\n", "/**\n * guid like '932ade5e-c515-4807-ac01-73b20ab3fb66'\n */\nexport const guid = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g,  (c) => {\n        const r = Math.random() * 16 | 0;\n        return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n    });\n};\n\n/**\n * id like 'df4unio1opulby2uqh4'\n */\nexport const newId = () => {\n  return Math.random().toString(36).substring(2) + (new Date()).getTime().toString(36);\n};\n", "import { ICircle, IPolygon, IRect, Matrix2, Vector2 } from '../types';\nimport { mod } from './other';\nimport { v2GetNormal, v2DotProduct } from './linear-algebra/vector';\n\n/**\n * Rectangles collision detection.\n * Rectangles should not be rotated.\n * The algorithm works by ensuring there is no gap between any of the 4 sides of the rectangles.\n * Any gap means a collision does not exist.\n * Returns true if collision is detected.\n */\nexport const rectCollide = (rect1: IRect, rect2: IRect) : boolean => {\n    return rect1.x <= rect2.x + rect2.w &&\n            rect1.x + rect1.w >= rect2.x &&\n            rect1.y <= rect2.y + rect2.h &&\n            rect1.h + rect1.y >= rect2.y;\n};\n\n/**\n * Circles collision detection.\n * This algorithm works by taking the center points of the two circles\n * and ensuring the distance between the center points\n * are less than the two radii added together.\n * Returns true if collision is detected.\n */\nexport const circleCollide = (circle1: ICircle, circle2: ICircle) => {\n    const dx = Math.abs(circle1.cx - circle2.cx);\n    const dy = Math.abs(circle1.cy - circle2.cy);\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    return distance <= circle1.r + circle2.r;\n};\n\n//-------------------- Separating Axis Theorem (SAT) Collision detection -------------------------\n\nconst getEdges = (poly: IPolygon) : Matrix2[] => {\n    const edges: Matrix2[] = [];\n\n    for(let i= 0; i<poly.length; i++){\n        const nextIndex = mod(i + 1, poly.length);\n        const edge: Matrix2 = [poly[i], poly[nextIndex]];\n        edges.push(edge);\n    }\n\n    return edges;\n};\n\nexport const convexPolygonsCollide = (poly1: IPolygon, poly2: IPolygon): boolean => {\n    const edges: Matrix2[] = [];\n\n    // collect polygon edges, and combine then into a single array\n    edges.push(...getEdges(poly1));\n    edges.push(...getEdges(poly2));\n\n    // for each edge, find the normal vector and project both polygons onto it\n    for (const edge of edges) {\n        const normal = v2GetNormal(edge[0], edge[1]);\n        const p1Proj = projectPolygon(poly1, normal);\n        const p2Proj = projectPolygon(poly2, normal);\n\n        // Check if the projections overlap\n        const isOverlap = p1Proj.max >= p2Proj.min && p2Proj.max >= p1Proj.min;\n\n        // Check if the projections overlap; if not, the polygons do not collide\n        if (!isOverlap) return false;\n    }\n\n    // If all tests pass, the polygons overlap and collide\n    return true;\n};\n\n/**\n * Project every polygon point onto the normal.\n * Then find min and max.\n */\nconst projectPolygon = (polygon: IPolygon, normal: Vector2): { min: number, max: number } => {\n    let min = Infinity;\n    let max = -Infinity;\n\n    // Project each vertex of the polygon onto the axis\n    for (const vertex of polygon) {\n        const projection = v2DotProduct(vertex, normal);\n        min = Math.min(min, projection);\n        max = Math.max(max, projection);\n    }\n\n    return { min, max };\n};", "export interface IAnimationProps {\n    duration?: number;\n    callback: (result: IAnimationResult) => void;\n    restartOnResize?: boolean;\n    resizeCallback?: (_entries: ResizeObserverEntry[], _observer: ResizeObserver) => void;\n}\n\nexport interface IAnimationResult {\n    start: () => void;\n    stop: () => void;\n    pause: () => void;\n    resume: () => void;\n    restart: () => void;\n    isAnimating: () => boolean;\n    getStartTime: () => number|undefined;\n    getElapsedTime: () => number|undefined;\n    getPercent: () => number|undefined;\n    getResizeObserver: () => ResizeObserver|undefined;\n}\n\nexport const animate = (props: IAnimationProps) : IAnimationResult => {\n\n    const _duration = props.duration !== undefined ? props.duration : Infinity;\n\n    let startTime: number|undefined = undefined; // in milliseconds\n    let animationId: number|undefined = undefined;\n\n    // the time elapsed since the start of the animation (in milliseconds)\n    let elapsed: number|undefined = undefined;\n    let previousTimeStamp: number|undefined = undefined;\n\n    let animating = false;\n    let observer: ResizeObserver|undefined = undefined;\n\n    // -------------------- COMMANDS ---------------------\n\n    const stop = () => {\n        startTime = undefined;\n        elapsed = undefined;\n        previousTimeStamp = undefined;\n        animating = false;\n\n        /*if(observer !== undefined){\n            observer.disconnect();\n            observer = undefined;\n        }*/\n\n        if(animationId === undefined) return;\n        window.cancelAnimationFrame(animationId);\n    };\n\n    const restart = () => {\n        stop();\n        start();\n    };\n\n    const pause = () => {\n        animating = false;\n    };\n\n    const resume = () => {\n        animating = true;\n    };\n\n    /**\n     * Animation Step.\n     * @param {number} timeStamp in milliseconds\n     */\n    const step = (timeStamp: DOMHighResTimeStamp) => {\n\n        if (startTime === undefined) {\n            startTime = timeStamp;\n        }\n\n        // the time elapsed since the start of the animation (in milliseconds)\n        elapsed = timeStamp - startTime;\n\n        if (animating && previousTimeStamp !== timeStamp && typeof props.callback === 'function') {\n\n            // do the rendering .............\n            props.callback(getResult());\n        }\n\n        if(elapsed <= _duration){\n            previousTimeStamp = timeStamp;\n            animationId = window.requestAnimationFrame(step);\n        }\n        else{\n            stop();\n        }\n    };\n\n    const observerHandler = (_entries: ResizeObserverEntry[], _observer: ResizeObserver) => {\n        restart();\n\n        if(typeof props.resizeCallback === 'function'){\n            props.resizeCallback(_entries, _observer);\n        }\n    };\n\n    const start = () => {\n        startTime = undefined;\n        elapsed = undefined;\n        previousTimeStamp = undefined;\n        animating = true;\n\n        if(props.restartOnResize && window.ResizeObserver && observer === undefined){\n            observer = new ResizeObserver(observerHandler);\n            observer.observe(document.body, { box: 'border-box' });\n        }\n        else{\n            animationId = window.requestAnimationFrame(step);\n        }\n    };\n\n    // --------------- GET INFO ----------------------\n\n    /**\n     * the time elapsed since the start of the animation (in milliseconds)\n     */\n    const getElapsedTime = () : number|undefined => {\n        return elapsed;\n    };\n\n    const isAnimating = () => {\n        return animating;\n    };\n\n    const getStartTime = () => {\n        return startTime;\n    };\n\n    const getPercent = () => {\n        if(_duration === Infinity || elapsed === undefined) return undefined;\n        return elapsed * 100 / _duration;\n    };\n\n    const getResizeObserver = () => {\n      return observer;\n    };\n\n    const getResult = () : IAnimationResult => {\n        return {\n\n            // commands --------------\n            start,\n            stop,\n            pause,\n            resume,\n            restart,\n\n            // information -------\n            isAnimating,\n            getElapsedTime,\n            getStartTime,\n            getPercent,\n            getResizeObserver,\n        };\n    };\n\n    return getResult();\n};\n", "import { setDecimalPlaces } from './format';\n\nexport const getCircleCircumference = (radius: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(2 * Math.PI * radius, decimalPlaces);\n};\n\nexport const getEllipseCircumference = (radius1: number, radius2: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(2 * Math.PI * Math.sqrt((radius1 ** 2 + radius2 ** 2) / 2), decimalPlaces);\n};\n\nexport const isAngleInCircleArc = (startAngleDeg: number, endAngleDeg: number, currentDegrees: number) : boolean => {\n\n    if(startAngleDeg > endAngleDeg) {\n        endAngleDeg += 360;\n    }\n\n    return currentDegrees >= startAngleDeg && currentDegrees <= endAngleDeg ||\n        (currentDegrees + 360) >= startAngleDeg && (currentDegrees + 360) <= endAngleDeg;\n};\n\n/**\n * get the side of a square inscribed in a circle\n */\nexport const getSquareInCircleSide = (radius: number, decimalPlaces = Infinity) => {\n    return setDecimalPlaces(radius * 2 / Math.sqrt(2), decimalPlaces);\n};\n", "import { setDecimalPlaces, Vector2 } from 'mz-math';\r\n\r\nexport interface ISvg {\r\n    cx: number;\r\n    cy: number;\r\n    radius: number;\r\n    size: number;\r\n    thickness: number;\r\n    border: number;\r\n    startAngleDeg: number;\r\n    endAngleDeg: number;\r\n}\r\n\r\nexport const getSvg = (\r\n    circleRadius: number,\r\n    circleThickness: number,\r\n    circleBorder: number,\r\n    maxPointerRadius: number,\r\n    startAngleDeg: number,\r\n    endAngleDeg: number\r\n) : ISvg => {\r\n\r\n    const thickness = circleThickness + circleBorder * 2;\r\n\r\n    const diff = Math.max(0, maxPointerRadius * 2 - thickness);\r\n    const size = circleRadius * 2 + thickness + diff;\r\n\r\n    const [ cx, cy ] = getSVGCenter(\r\n        circleRadius,\r\n        maxPointerRadius,\r\n        circleThickness,\r\n        circleBorder\r\n    );\r\n\r\n    return {\r\n        cx,\r\n        cy,\r\n        radius: circleRadius,\r\n        size,\r\n        thickness: circleThickness,\r\n        border: circleBorder,\r\n        startAngleDeg,\r\n        endAngleDeg\r\n    } as ISvg;\r\n};\r\n\r\nexport const getSVGCenter = (\r\n    circleRadius: number,\r\n    maxPointerRadius: number,\r\n    circleThickness: number,\r\n    circleBorder: number\r\n) : Vector2 => {\r\n\r\n    const size = getSVGSize(\r\n        circleRadius,\r\n        maxPointerRadius,\r\n        circleThickness,\r\n        circleBorder\r\n    );\r\n\r\n    const val = setDecimalPlaces(size/2, 2);\r\n\r\n    return [\r\n        val,\r\n        val,\r\n    ];\r\n};\r\n\r\nexport const getSVGSize = (\r\n    circleRadius: number,\r\n    maxPointerRadius: number,\r\n    circleThickness: number,\r\n    circleBorder: number\r\n) : number => {\r\n    const thickness = circleThickness + circleBorder * 2;\r\n    const diff = Math.max(0, maxPointerRadius * 2 - thickness);\r\n    return circleRadius * 2 + thickness + diff;\r\n};", "// Data  Defaults --------------------\r\nexport const DEFAULT_MIN = 0;\r\nexport const DEFAULT_MAX = 100;\r\nexport const DEFAULT_STEP = 1;\r\nexport const DEFAULT_ARROW_STEP = 1;\r\nexport const DEFAULT_ROUND = 0;\r\n\r\n// Path Defaults ---------------------\r\nexport const DEFAULT_PATH_START_ANGLE = 0;\r\nexport const DEFAULT_PATH_END_ANGLE = 360;\r\nexport const DEFAULT_PATH_RADIUS = 150;\r\nexport const DEFAULT_PATH_THICKNESS = 5;\r\nexport const DEFAULT_PATH_BG_COLOR = '#efefef';\r\nexport const DEFAULT_PATH_BORDER = 0;\r\nexport const DEFAULT_PATH_BORDER_COLOR = '#444444';\r\n\r\n// Pointer Defaults ------------------\r\nexport const DEFAULT_POINTER_RADIUS = 10;\r\nexport const DEFAULT_POINTER_BG_COLOR = '#163a86';\r\nexport const DEFAULT_POINTER_BG_COLOR_SELECTED = '#000';\r\nexport const DEFAULT_POINTER_BG_COLOR_DISABLED = '#a8a8a8';\r\nexport const DEFAULT_POINTER_BORDER = 0;\r\nexport const DEFAULT_POINTER_BORDER_COLOR = '#000';\r\n\r\n// Connection Defaults ------------------\r\nexport const DEFAULT_CONNECTION_BG_COLOR = '#5daed2';\r\nexport const DEFAULT_CONNECTION_BG_COLOR_DISABLED = '#97b0bb';\r\n\r\n// Text Defaults ------------------------\r\nexport const DEFAULT_TEXT_COLOR = '#000';\r\nexport const DEFAULT_TEXT_FONT_SIZE = 16;\r\n\r\n// Ticks Defaults -----------------------\r\nexport const DEFAULT_TICKS_ENABLED = false;\r\nexport const DEFAULT_TICKS_WIDTH = 3;\r\nexport const DEFAULT_TICKS_HEIGHT = 10;\r\nexport const DEFAULT_TICKS_COLOR = '#efefef';\r\nexport const DEFAULT_TICKS_VALUES_COLOR = '#000';\r\nexport const DEFAULT_TICKS_VALUES_FONT_SIZE = 12;\r\nexport const DEFAULT_TICKS_GROUP_SIZE = 10;\r\nexport const DEFAULT_TICKS_VALUES_DISTANCE = 15;\r\n\r\n// Animation Defaults -----------------------\r\nexport const DEFAULT_ANIMATION_DURATION = 200;\r\n\r\n\r\n", "import { isNumber } from 'mz-math';\r\n\r\nexport const getNumber = (value: number|string|undefined|null, defaultValue: number) : number => {\r\n    return isNumber(value) ? Number(value) : defaultValue;\r\n};\r\n\r\nexport const getString = (value: string|undefined|null, defaultValue: string) : string => {\r\n    return value === undefined || value === null ? defaultValue : value;\r\n};\r\n\r\nexport const getBoolean = (value: boolean|undefined|null, defaultValue: boolean) : boolean => {\r\n    return value === undefined || value === null ? defaultValue : value;\r\n};", "import { mod } from 'mz-math';\r\n\r\nexport interface ICircle {\r\n    strokeDasharray: string;\r\n    strokeOffset: number;\r\n}\r\n\r\nexport const isAngleInArc = (startAngleDeg: number, endAngleDeg: number, currentDegrees: number) : boolean => {\r\n    if(startAngleDeg > endAngleDeg) {\r\n        endAngleDeg += 360;\r\n    }\r\n\r\n    return (currentDegrees >= startAngleDeg && currentDegrees <= endAngleDeg) ||\r\n        ((currentDegrees + 360) >= startAngleDeg && (currentDegrees + 360) <= endAngleDeg);\r\n};\r\n\r\nexport const getAnglesDistance = (startAngle: number, endAngle: number) => {\r\n    if(endAngle < startAngle) {\r\n        endAngle += 360;\r\n    }\r\n\r\n    const diff = endAngle - startAngle;\r\n    const diffMod = mod(diff, 360);\r\n\r\n    return diffMod === 0 && diff > 0 ? 360 : diffMod;\r\n};\r\n\r\nexport const getCircle = (\r\n    startAngleDeg: number,\r\n    endAngleDeg: number,\r\n    radius: number,\r\n) : ICircle => {\r\n\r\n    if(startAngleDeg > endAngleDeg) {\r\n        endAngleDeg += 360;\r\n    }\r\n\r\n    const circumference = 2 * Math.PI * radius;\r\n    const angleDiff = endAngleDeg - startAngleDeg;\r\n    const strokeOffset = -(startAngleDeg / 360) * circumference;\r\n    const strokeDasharray = (angleDiff / 360) * circumference;\r\n    const complement = circumference - strokeDasharray;\r\n\r\n    return {\r\n        strokeDasharray: [ strokeDasharray, complement ].join(' '),\r\n        strokeOffset,\r\n    } as ICircle;\r\n};", "import {\r\n    Vector2,\r\n    convertRange,\r\n    mod,\r\n    setDecimalPlaces,\r\n    v2Sub,\r\n    radiansToDegrees,\r\n    degreesToRadians, circleMovement, v2Distance\r\n} from 'mz-math';\r\nimport { ISettings } from './settings-provider';\r\nimport {\r\n    DEFAULT_PATH_END_ANGLE,\r\n    DEFAULT_PATH_START_ANGLE,\r\n    DEFAULT_POINTER_BG_COLOR,\r\n    DEFAULT_POINTER_BG_COLOR_DISABLED,\r\n    DEFAULT_POINTER_BG_COLOR_SELECTED,\r\n    DEFAULT_POINTER_BORDER,\r\n    DEFAULT_POINTER_BORDER_COLOR,\r\n    DEFAULT_POINTER_RADIUS,\r\n} from './defaults-provider';\r\nimport { getBoolean, getNumber, getString } from './common-provider';\r\nimport { IData } from './data-provider';\r\nimport { getAnglesDistance } from './circle-provider';\r\n\r\nexport interface IPointer {\r\n    id: string;\r\n    index: number;\r\n    radius: number;\r\n    angleDeg: number;\r\n    prevAngleDeg: number;\r\n\r\n    bgColor: string;\r\n    bgColorSelected: string;\r\n    bgColorDisabled: string;\r\n    bgColorHover: string;\r\n\r\n    border: number;\r\n    borderColor: string;\r\n\r\n    disabled: boolean;\r\n    ariaLabel?: string;\r\n}\r\n\r\nexport interface IPointers {\r\n    pointers: IPointer[];\r\n    maxRadius: number;\r\n}\r\n\r\nexport const getAngleByMouse = (\r\n    $svg: SVGSVGElement,\r\n    clientX: number,\r\n    clientY: number,\r\n    cx: number,\r\n    cy: number,\r\n    rx: number,\r\n    ry: number\r\n) => {\r\n    const { left, top } = $svg.getBoundingClientRect();\r\n\r\n    const relativeMouse: Vector2 = [\r\n        clientX - left,\r\n        clientY - top,\r\n    ];\r\n\r\n    const vector = v2Sub(relativeMouse, [ cx, cy ]);\r\n\r\n    let angleRad = Math.atan2(vector[1] / ry, vector[0] / rx);\r\n    if(angleRad < 0){\r\n        angleRad += 2 * Math.PI;\r\n    }\r\n\r\n    return radiansToDegrees(angleRad);\r\n};\r\n\r\nexport const angle2value = (data: IData, angle: number, pathStartAngle: number, pathEndAngle: number) : string | number => {\r\n\r\n    if(pathEndAngle < pathStartAngle) {\r\n        pathEndAngle += 360;\r\n    }\r\n\r\n    if(angle < pathStartAngle){\r\n        angle += 360;\r\n    }\r\n\r\n    let value: string|number = convertRange(angle, pathStartAngle, pathEndAngle, data.min, data.max);\r\n\r\n    if(data.data.length > 0) {\r\n        const index = Math.round(value);\r\n        value = data.data[index];\r\n    }\r\n    else{\r\n        value = setDecimalPlaces(value, data.round);\r\n    }\r\n\r\n    return value;\r\n};\r\n\r\nconst value2angle = (data: IData, value: string | number, pathStartAngle: number, pathEndAngle: number) => {\r\n    let _value: number;\r\n\r\n    if(pathEndAngle < pathStartAngle) {\r\n        pathEndAngle += 360;\r\n    }\r\n\r\n    if(data.data.length > 0) {\r\n        const valueIndex = data.data.findIndex(item => item === value);\r\n        _value = valueIndex === -1 ? 0 : valueIndex;\r\n    }\r\n    else{\r\n        _value = typeof value !== 'number' ? data.min : value;\r\n    }\r\n\r\n    return mod(convertRange(_value, data.min, data.max, pathStartAngle, pathEndAngle), 360);\r\n};\r\n\r\nexport const initPointers = (\r\n    settings: ISettings,\r\n    data: IData\r\n) : IPointer[] => {\r\n\r\n    if(!settings || !settings.pointers || settings.pointers.length < 0 || !data) {\r\n        const angleDeg = mod(getNumber(settings.pathStartAngle, DEFAULT_PATH_START_ANGLE), 360);\r\n\r\n        const bgColor = getString(settings.pointerBgColor, DEFAULT_POINTER_BG_COLOR);\r\n        const bgColorSelected = getString(settings.pointerBgColorSelected, DEFAULT_POINTER_BG_COLOR_SELECTED);\r\n        const bgColorDisabled = getString(settings.pointerBgColorDisabled, DEFAULT_POINTER_BG_COLOR_DISABLED);\r\n        const bgColorHover = getString(settings.pointerBgColorHover, bgColorSelected);\r\n\r\n        return [{\r\n            id: '0',\r\n            index: 0,\r\n            radius: getNumber(settings.pointerRadius, DEFAULT_POINTER_RADIUS),\r\n            angleDeg,\r\n            prevAngleDeg: angleDeg,\r\n            bgColor,\r\n            bgColorSelected,\r\n            bgColorDisabled,\r\n            bgColorHover,\r\n            border: getNumber(settings.pointerBorder, DEFAULT_POINTER_BORDER),\r\n            borderColor: getString(settings.pointerBorderColor, DEFAULT_POINTER_BORDER_COLOR),\r\n            disabled: !!settings.disabled,\r\n        }]\r\n    }\r\n\r\n    const pointers: IPointer[] = [];\r\n\r\n    for(let i=0; i<settings.pointers.length; i++) {\r\n        const settingPointer = settings.pointers[i];\r\n\r\n        const radius = settingPointer.radius !== undefined ? settingPointer.radius : getNumber(settings.pointerRadius, DEFAULT_POINTER_RADIUS);\r\n        const bgColor = settingPointer.bgColor ? settingPointer.bgColor : getString(settings.pointerBgColor, DEFAULT_POINTER_BG_COLOR);\r\n        const bgColorSelected = settingPointer.bgColorSelected ? settingPointer.bgColorSelected : getString(settings.pointerBgColorSelected, DEFAULT_POINTER_BG_COLOR_SELECTED);\r\n        const bgColorDisabled = settingPointer.bgColorDisabled ? settingPointer.bgColorDisabled : getString(settings.pointerBgColorDisabled, DEFAULT_POINTER_BG_COLOR_DISABLED);\r\n        const bgColorHover = settingPointer.bgColorHover ? settingPointer.bgColorHover : getString(settings.pointerBgColorHover, bgColorSelected);\r\n\r\n        const border = settingPointer.border ? settingPointer.border : getNumber(settings.pointerBorder, DEFAULT_POINTER_BORDER);\r\n        const borderColor = settingPointer.borderColor ? settingPointer.borderColor : getString(settings.pointerBorderColor, DEFAULT_POINTER_BORDER_COLOR);\r\n\r\n        const disabled = settingPointer.disabled !== undefined ? settingPointer.disabled : getBoolean(settings.disabled, false);\r\n        const pathStartAngle = getNumber(settings.pathStartAngle, DEFAULT_PATH_START_ANGLE);\r\n        const pathEndAngle = getNumber(settings.pathEndAngle, DEFAULT_PATH_END_ANGLE);\r\n\r\n        const angleDeg = value2angle(\r\n            data,\r\n            settingPointer.value,\r\n            pathStartAngle,\r\n            pathEndAngle,\r\n        );\r\n\r\n        let angleAfterStep = roundToStep(angleDeg, data.stepAngleDeg, pathStartAngle, pathEndAngle);\r\n\r\n        if(data.isClosedShape && mod(angleAfterStep, 360) === mod(pathEndAngle, 360)){\r\n            angleAfterStep = pathStartAngle;\r\n        }\r\n\r\n        pointers.push({\r\n            id: i.toString(),\r\n            index: i,\r\n            radius,\r\n            angleDeg: angleAfterStep,\r\n            prevAngleDeg: angleAfterStep,\r\n\r\n            bgColor,\r\n            bgColorSelected,\r\n            bgColorDisabled,\r\n            bgColorHover,\r\n\r\n            border,\r\n            borderColor,\r\n\r\n            disabled,\r\n            ariaLabel: settingPointer.ariaLabel,\r\n        });\r\n    }\r\n\r\n    return pointers;\r\n};\r\n\r\nexport const getPointers = (settings: ISettings, data: IData) : IPointers => {\r\n\r\n    const pointers = initPointers(settings, data);\r\n\r\n    return {\r\n        pointers,\r\n        maxRadius: getMaxRadius(pointers),\r\n    }\r\n};\r\n\r\nconst getMaxRadius = (pointers: IPointer[]) : number => {\r\n    if(pointers.length <= 0) return 0;\r\n\r\n    let max = -Infinity;\r\n\r\n    for(const pointer of pointers){\r\n        max = Math.max(max, Math.max(0, pointer.radius + pointer.border/2));\r\n    }\r\n\r\n    return max;\r\n};\r\n\r\nexport const getClosestPointer = (\r\n    pointers: IPointer[],\r\n    currentPlaceDegrees: number,\r\n    cx: number,\r\n    cy: number,\r\n    pathRadius: number\r\n) => {\r\n    if(!pointers || pointers.length <= 0) return null;\r\n\r\n    if(pointers.length === 1) return pointers[0];\r\n\r\n    const angleRad = convertRange(degreesToRadians(currentPlaceDegrees), 0, Math.PI * 2, 0, Math.PI); // [0, Math.PI*2] ---> [0, Math.PI]\r\n    const currentPointOnArc = circleMovement([ cx, cy ], angleRad, pathRadius);\r\n\r\n    let min: number|undefined = undefined;\r\n    let closestPointer: IPointer = null;\r\n\r\n    const enabledPointers = pointers.filter(p => !p.disabled);\r\n\r\n    for(const pointer of enabledPointers) {\r\n        const pointerAngleRad = convertRange(degreesToRadians(pointer.angleDeg), 0, Math.PI * 2, 0, Math.PI);\r\n        const pointOnArc = circleMovement([ cx, cy ], pointerAngleRad, pathRadius);\r\n        const distance = v2Distance(currentPointOnArc, pointOnArc);\r\n\r\n        if(min === undefined || distance < min) {\r\n            min = distance;\r\n            closestPointer = pointer;\r\n        }\r\n    }\r\n\r\n    return { ...closestPointer };\r\n};\r\n\r\nexport const getClosestEdge = (\r\n    startAngleDegrees: number,\r\n    endAngleDegrees: number,\r\n    currentPlaceDegrees: number,\r\n    cx: number,\r\n    cy: number,\r\n    pathRadius: number\r\n) => {\r\n\r\n    const angleRad = convertRange(degreesToRadians(currentPlaceDegrees), 0, Math.PI * 2, 0, Math.PI); // [0, Math.PI*2] ---> [0, Math.PI]\r\n    const currentPointOnArc = circleMovement([ cx, cy ], angleRad, pathRadius);\r\n\r\n    const startAngleRad = convertRange(degreesToRadians(startAngleDegrees), 0, Math.PI * 2, 0, Math.PI); // [0, Math.PI*2] ---> [0, Math.PI]\r\n    const startPointOnArc = circleMovement([ cx, cy ], startAngleRad, pathRadius);\r\n\r\n    const endAngleRad = convertRange(degreesToRadians(endAngleDegrees), 0, Math.PI * 2, 0, Math.PI); // [0, Math.PI*2] ---> [0, Math.PI]\r\n    const endPointOnArc = circleMovement([ cx, cy ], endAngleRad, pathRadius);\r\n\r\n    const distance1 = v2Distance(currentPointOnArc, startPointOnArc);\r\n    const distance2 = v2Distance(currentPointOnArc, endPointOnArc);\r\n\r\n    return distance1 <= distance2 ? startAngleDegrees : endAngleDegrees;\r\n};\r\n\r\nexport const getMinMaxDistancePointers = (pointers: IPointer[], pathStartAngle: number) : [IPointer, IPointer] | null => {\r\n    if(!pointers || pointers.length <= 0) return null;\r\n\r\n    let minDistance = undefined;\r\n    let maxDistance = undefined;\r\n    let minPointer = null;\r\n    let maxPointer = null;\r\n\r\n    for(const pointer of pointers) {\r\n\r\n        const distance = getAnglesDistance(pathStartAngle, pointer.angleDeg);\r\n\r\n        if(minDistance === undefined || distance < minDistance) {\r\n            minPointer = pointer;\r\n            minDistance = distance;\r\n        }\r\n\r\n        if(maxDistance === undefined || distance > maxDistance) {\r\n            maxPointer = pointer;\r\n            maxDistance = distance;\r\n        }\r\n    }\r\n\r\n    if(minPointer === null || maxPointer === null) return null;\r\n\r\n    return [\r\n        minPointer,\r\n        maxPointer\r\n    ];\r\n};\r\n\r\nexport const roundToStep = (angleDeg: number, step: number, pathStartAngle: number, pathEndAngle: number) : number => {\r\n    if((mod(angleDeg, 360) === mod(pathStartAngle, 360)) ||\r\n        (mod(angleDeg, 360) === mod(pathEndAngle, 360))) return angleDeg;\r\n    return step === 0 ? 0 : Math.round(angleDeg / step) * step;\r\n};\r\n", "import { angle2value, getAngleByMouse, getClosestEdge, IPointer } from '../domain/pointers-provider';\r\nimport {\r\n    useEffect,\r\n    useState,\r\n    MouseEvent as ReactMouseEvent,\r\n    TouchEvent as ReactTouchEvent,\r\n    KeyboardEvent,\r\n    useRef, useCallback,\r\n} from 'react';\r\nimport { circleMovement, convertRange, degreesToRadians, Vector2 } from 'mz-math';\r\nimport { ISettings } from '../domain/settings-provider';\r\nimport { ISvg } from '../domain/svg-provider';\r\nimport { isAngleInArc } from '../domain/circle-provider';\r\nimport { IData } from '../domain/data-provider';\r\nimport { outlineNoneStyle } from '../domain/style-provider';\r\nimport { DEFAULT_POINTER_BG_COLOR } from '../domain/defaults-provider';\r\n\r\nexport interface IPointerProps {\r\n    settings: ISettings;\r\n    pointer: IPointer;\r\n    svg: ISvg;\r\n    $svg: SVGSVGElement;\r\n    data: IData;\r\n    setPointer: (pointer: IPointer, newAngleDeg: number) => void;\r\n    selectedPointerId: string;\r\n}\r\n\r\nconst getPointerFill = (\r\n    pointer: IPointer,\r\n    selectedPointerId: string,\r\n    bgColor: string,\r\n    bgColorSelected: string,\r\n    bgColorDisabled: string,\r\n    bgColorHover: string,\r\n    isMouseOver: boolean\r\n) => {\r\n    if(pointer.disabled) return bgColorDisabled;\r\n\r\n    if(isMouseOver) return bgColorHover;\r\n\r\n    if(pointer.id === selectedPointerId) {\r\n        return bgColorSelected;\r\n    }\r\n\r\n    return bgColor;\r\n};\r\n\r\nconst Pointer = (props: IPointerProps) => {\r\n\r\n    const pointerRef = useRef<SVGGElement|null>(null);\r\n\r\n    const {\r\n        pointer, svg, $svg, data, settings,\r\n        setPointer, selectedPointerId,\r\n    } = props;\r\n\r\n    const {\r\n        radius,\r\n        angleDeg,\r\n        bgColor,\r\n        bgColorSelected,\r\n        bgColorDisabled,\r\n        bgColorHover,\r\n        border,\r\n        borderColor,\r\n    } = props.pointer;\r\n\r\n    const { cx, cy } = svg;\r\n\r\n    const [ center, setCenter ] = useState<Vector2|null>(null);\r\n    const [ value, setValue ] = useState<string>('');\r\n    const [ fill, setFill ] = useState(DEFAULT_POINTER_BG_COLOR);\r\n    const [ isMouseOver, setIsMouseOver ] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setFill(getPointerFill(\r\n            pointer,\r\n            selectedPointerId,\r\n            bgColor,\r\n            bgColorSelected,\r\n            bgColorDisabled,\r\n            bgColorHover,\r\n            isMouseOver\r\n        ));\r\n    }, [\r\n        pointer,\r\n        selectedPointerId,\r\n        bgColor,\r\n        bgColorSelected,\r\n        bgColorDisabled,\r\n        bgColorHover,\r\n        isMouseOver\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        const value = angle2value(\r\n            data,\r\n            pointer.angleDeg,\r\n            svg.startAngleDeg,\r\n            svg.endAngleDeg\r\n        );\r\n        setValue(value === undefined ? '' : value.toString())\r\n    }, [\r\n        data,\r\n        pointer.angleDeg,\r\n        svg.startAngleDeg,\r\n        svg.endAngleDeg,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        const angleRad = convertRange(degreesToRadians(angleDeg), 0, Math.PI * 2, 0, Math.PI); // [0, Math.PI*2] ---> [0, Math.PI]\r\n        const pointerCenter = circleMovement([cx, cy], angleRad, svg.radius);\r\n        setCenter(pointerCenter);\r\n    }, [\r\n        angleDeg,\r\n        cx,\r\n        cy,\r\n        svg.radius,\r\n    ]);\r\n\r\n    const onValueChange = useCallback((evt: MouseEvent | ReactMouseEvent | TouchEvent | ReactTouchEvent) => {\r\n        if(!$svg || settings.disabled || pointer.disabled) return;\r\n\r\n        const mouseX = evt.type.indexOf('mouse') !== -1 ? (evt as MouseEvent).clientX : (evt as TouchEvent).touches[0].clientX;\r\n        const mouseY = evt.type.indexOf('mouse') !== -1 ? (evt as MouseEvent).clientY : (evt as TouchEvent).touches[0].clientY;\r\n\r\n        const degrees = getAngleByMouse(\r\n            $svg,\r\n            mouseX,\r\n            mouseY,\r\n            svg.cx,\r\n            svg.cy,\r\n            svg.radius,\r\n            svg.radius\r\n        );\r\n\r\n        let newAngleDeg;\r\n\r\n        if(!isAngleInArc(\r\n            svg.startAngleDeg,\r\n            svg.endAngleDeg,\r\n            degrees\r\n        )){\r\n            newAngleDeg = getClosestEdge(\r\n                svg.startAngleDeg,\r\n                svg.endAngleDeg,\r\n                pointer.angleDeg,\r\n                svg.cx,\r\n                svg.cy,\r\n                svg.radius\r\n            );\r\n        }\r\n        else{\r\n            newAngleDeg = degrees;\r\n        }\r\n\r\n        setPointer(pointer, newAngleDeg);\r\n    }, [\r\n        $svg,\r\n        pointer,\r\n        setPointer,\r\n        svg.cx,\r\n        svg.cy,\r\n        svg.endAngleDeg,\r\n        svg.radius,\r\n        svg.startAngleDeg,\r\n        settings.disabled,\r\n    ]);\r\n\r\n    const onMouseUp = () => {\r\n        window.removeEventListener('mousemove', onValueChange);\r\n        window.removeEventListener('mouseup', onValueChange);\r\n    };\r\n\r\n    const onMouseDown = (evt: ReactMouseEvent) => {\r\n        if(settings.disabled || pointer.disabled) return;\r\n\r\n        onValueChange(evt);\r\n\r\n        window.addEventListener('mousemove', onValueChange);\r\n        window.addEventListener('mouseup', onMouseUp);\r\n    };\r\n\r\n    const onKeyDown = (evt: KeyboardEvent) => {\r\n\r\n        if(settings.disabled || pointer.disabled || settings.keyboardDisabled) return;\r\n\r\n        switch (evt.key) {\r\n            case 'ArrowLeft': {\r\n                evt.preventDefault();\r\n                setPointer(pointer, pointer.angleDeg + data.arrowStepAngleDeg);\r\n                break;\r\n            }\r\n\r\n            case 'ArrowRight': {\r\n                evt.preventDefault();\r\n                setPointer(pointer, pointer.angleDeg - data.arrowStepAngleDeg);\r\n                break;\r\n            }\r\n\r\n            case 'ArrowUp': {\r\n                evt.preventDefault();\r\n                setPointer(pointer, pointer.angleDeg - data.arrowStepAngleDeg);\r\n                break;\r\n            }\r\n\r\n            case 'ArrowDown': {\r\n                evt.preventDefault();\r\n                setPointer(pointer, pointer.angleDeg + data.arrowStepAngleDeg);\r\n                break;\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const $current = pointerRef.current;\r\n\r\n        const onTouch = (evt: TouchEvent | ReactTouchEvent) => {\r\n            if(settings.disabled || pointer.disabled) return;\r\n\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n            onValueChange(evt);\r\n        };\r\n\r\n        const onWheel = (evt: WheelEvent) => {\r\n\r\n            if(settings.disabled || pointer.disabled || settings.mousewheelDisabled || document.activeElement !== $current) return;\r\n\r\n            evt.stopPropagation();\r\n            evt.preventDefault();\r\n\r\n            const scrollTop = evt.deltaY < 0;\r\n\r\n            let newAngleDeg;\r\n            if(scrollTop) {\r\n                newAngleDeg = pointer.angleDeg + data.arrowStepAngleDeg;\r\n            }\r\n            else{\r\n                newAngleDeg = pointer.angleDeg - data.arrowStepAngleDeg;\r\n            }\r\n\r\n            setPointer(pointer, newAngleDeg);\r\n        };\r\n\r\n        $current?.addEventListener('touchmove', onTouch, {\r\n            passive: false,\r\n        });\r\n\r\n        document.addEventListener('wheel', onWheel, {\r\n            passive: false,\r\n        });\r\n\r\n        return () => {\r\n            $current?.removeEventListener('touchmove', onTouch);\r\n            document.removeEventListener('wheel', onWheel);\r\n        };\r\n    }, [\r\n        center,\r\n        onValueChange,\r\n        data.arrowStepAngleDeg,\r\n        pointer,\r\n        setPointer,\r\n        settings.disabled,\r\n        settings.mousewheelDisabled,\r\n    ]);\r\n\r\n    const onMouseOver = () => {\r\n        setIsMouseOver(true);\r\n    };\r\n\r\n    const onMouseOut = () => {\r\n        setIsMouseOver(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {\r\n                center &&\r\n                <g\r\n                    ref={ pointerRef }\r\n                    transform={ `translate(${ center[0] - radius/2 }, ${ center[1] - radius/2 })` }\r\n\r\n                    role=\"slider\"\r\n                    aria-disabled={ pointer.disabled ? true : undefined }\r\n                    aria-valuenow={ pointer.angleDeg }\r\n                    aria-valuetext={ value }\r\n                    aria-label={ pointer.ariaLabel }\r\n\r\n                    data-type=\"pointer\"\r\n                    className={ `mz-round-slider-pointer ${ pointer.disabled ? 'mz-round-slider-pointer-disabled' : '' }` }\r\n                    data-angle={ pointer.angleDeg }\r\n                    data-id={ pointer.id }\r\n                    data-index={ pointer.index }\r\n\r\n                    onMouseDown={ onMouseDown }\r\n                    onKeyDown={ onKeyDown }\r\n                    onMouseOver={ onMouseOver }\r\n                    onMouseOut={ onMouseOut }\r\n                    tabIndex={ 0 }\r\n\r\n                    cursor={ pointer.disabled ? 'default' : 'pointer' }\r\n                    style={ outlineNoneStyle }>\r\n\r\n                    {\r\n                        !settings.pointerSVG &&\r\n                        <circle\r\n                            cx={ radius/2 }\r\n                            cy={ radius/2 }\r\n                            r={ radius }\r\n                            fill={ fill }\r\n                            strokeWidth={ border }\r\n                            stroke={ borderColor }\r\n                            style={{\r\n                                transition: '0.3s fill',\r\n                            }}\r\n                        />\r\n                    }\r\n\r\n                    {\r\n                        settings.pointerSVG &&\r\n                        <g>\r\n                            { settings.pointerSVG }\r\n                        </g>\r\n                    }\r\n                </g>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Pointer;", "export const outlineNoneStyle = {\r\n    outline: 'none',\r\n};", "import { IPointer, IPointers } from '../domain/pointers-provider';\r\nimport Pointer from './Pointer';\r\nimport { ISettings } from '../domain/settings-provider';\r\nimport { ISvg } from '../domain/svg-provider';\r\nimport { IData } from '../domain/data-provider';\r\n\r\nexport interface IPointersProps {\r\n    pointers: IPointers;\r\n    settings: ISettings;\r\n    svg: ISvg;\r\n    $svg: SVGSVGElement;\r\n    data: IData;\r\n    setPointer: (pointer: IPointer, newAngleDeg: number) => void;\r\n    selectedPointerId: string;\r\n}\r\n\r\nconst Pointers = (props: IPointersProps) => {\r\n\r\n    const {\r\n        pointers, settings, svg, $svg, data,\r\n        setPointer, selectedPointerId,\r\n    } = props;\r\n\r\n    return (\r\n        <>\r\n            {\r\n                pointers.pointers.map(pointer => {\r\n\r\n                    return (\r\n                        <Pointer\r\n                            key={ pointer.id }\r\n                            pointer={ pointer }\r\n                            svg={ svg }\r\n                            settings={ settings }\r\n                            $svg={ $svg }\r\n                            data={ data }\r\n                            setPointer={ setPointer }\r\n                            selectedPointerId={ selectedPointerId }\r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Pointers;", "import { ISettings } from './settings-provider';\r\nimport { getNumber } from './common-provider';\r\nimport {\r\n    DEFAULT_ARROW_STEP,\r\n    DEFAULT_MAX,\r\n    DEFAULT_MIN,\r\n    DEFAULT_PATH_END_ANGLE,\r\n    DEFAULT_PATH_START_ANGLE,\r\n    DEFAULT_ROUND,\r\n    DEFAULT_STEP\r\n} from './defaults-provider';\r\nimport { mod } from 'mz-math';\r\n\r\nexport interface IData {\r\n    min: number;\r\n    max: number;\r\n    stepAngleDeg: number;\r\n    arrowStepAngleDeg: number;\r\n    round: number;\r\n    data: (string | number)[];\r\n    isClosedShape: boolean;\r\n}\r\n\r\nexport const getData = (setting: ISettings) : IData => {\r\n\r\n    let min = getNumber(setting.min, DEFAULT_MIN);\r\n    let max = getNumber(setting.max, DEFAULT_MAX);\r\n    const step = getNumber(setting.step, DEFAULT_STEP);\r\n    const arrowStep = getNumber(setting.arrowStep, DEFAULT_ARROW_STEP);\r\n    const round = getNumber(setting.round, DEFAULT_ROUND);\r\n    const data = setting.data || [];\r\n\r\n    if(data.length > 0) {\r\n        const minIndex = data.findIndex(item => item === min);\r\n        const maxIndex = data.findIndex(item => item === max);\r\n\r\n        min = minIndex === -1 ? 0 : minIndex;\r\n        max = maxIndex === -1 ? data.length : maxIndex;\r\n    }\r\n    else{\r\n        if(min > max) {\r\n            min = max + DEFAULT_MAX;\r\n        }\r\n    }\r\n\r\n    const pathStartAngle = getNumber(setting.pathStartAngle, DEFAULT_PATH_START_ANGLE);\r\n    const pathEndAngle = getNumber(setting.pathEndAngle, DEFAULT_PATH_END_ANGLE);\r\n    const isClosedShape = mod(pathStartAngle, 360) === mod(pathEndAngle, 360);\r\n\r\n    const stepAngleDeg = step * (pathEndAngle - pathStartAngle) / (max - min);\r\n    const arrowStepAngleDeg = arrowStep * (pathEndAngle - pathStartAngle) / (max - min);\r\n\r\n    return {\r\n        min,\r\n        max,\r\n        round,\r\n        data,\r\n        stepAngleDeg,\r\n        arrowStepAngleDeg,\r\n        isClosedShape,\r\n    }\r\n};", "import { ISettings } from '../domain/settings-provider';\r\nimport { getBoolean, getNumber, getString } from '../domain/common-provider';\r\nimport {\r\n    DEFAULT_ANIMATION_DURATION,\r\n    DEFAULT_CONNECTION_BG_COLOR,\r\n    DEFAULT_CONNECTION_BG_COLOR_DISABLED\r\n} from '../domain/defaults-provider';\r\nimport {\r\n    getAngleByMouse,\r\n    getClosestPointer,\r\n    getMinMaxDistancePointers,\r\n    IPointer,\r\n    IPointers\r\n} from '../domain/pointers-provider';\r\nimport {\r\n    MouseEvent as ReactMouseEvent,\r\n    useCallback,\r\n    useEffect, useRef,\r\n    useState\r\n} from 'react';\r\nimport { getConnection, IConnection } from '../domain/connection-provider';\r\nimport { ISvg } from '../domain/svg-provider';\r\nimport { IData } from '../domain/data-provider';\r\nimport { animate, IAnimationResult, mod } from 'mz-math';\r\nimport { getAnimationProgressAngle } from '../domain/animation-provider';\r\n\r\ninterface IConnectionProps {\r\n    settings: ISettings;\r\n    pointers: IPointers;\r\n    svg: ISvg;\r\n    $svg: SVGSVGElement;\r\n    data: IData;\r\n    setPointer: (pointer: IPointer, newAngleDeg: number) => void;\r\n}\r\n\r\nconst getStroke = (\r\n    disabled: boolean,\r\n    connectionBgColorDisabled: string,\r\n    connectionBgColor: string,\r\n    isMouseOver: boolean,\r\n    connectionBgColorHover: string\r\n) => {\r\n    if(disabled) return getString(connectionBgColorDisabled, DEFAULT_CONNECTION_BG_COLOR_DISABLED);\r\n\r\n    const bgColor = getString(connectionBgColor, DEFAULT_CONNECTION_BG_COLOR);\r\n\r\n    if(isMouseOver) {\r\n        return getString(connectionBgColorHover, bgColor);\r\n    }\r\n\r\n    return bgColor;\r\n};\r\n\r\nconst Connection = (props: IConnectionProps) => {\r\n\r\n    const { settings, pointers, $svg, svg, data, setPointer } = props;\r\n\r\n    const [ connection, setConnection ] = useState<IConnection|null>(null);\r\n    const [ animation, setAnimation ] = useState<IAnimationResult|null>(null);\r\n    const [ stroke, setStroke ] = useState(DEFAULT_CONNECTION_BG_COLOR);\r\n    const [ isMouseOver, setIsMouseOver ] = useState(false);\r\n\r\n    const rangeDraggingLastAngle = useRef<number>();\r\n    const animationClosestPointer = useRef<IPointer|null>(null);\r\n    const animationSourceDegrees = useRef(0);\r\n    const animationTargetDegrees = useRef(0);\r\n\r\n    useEffect(() => {\r\n        setStroke(getStroke(\r\n            settings.disabled,\r\n            settings.connectionBgColorDisabled,\r\n            settings.connectionBgColor,\r\n            isMouseOver,\r\n            settings.connectionBgColorHover\r\n        ));\r\n    }, [\r\n        settings.disabled,\r\n        settings.connectionBgColorDisabled,\r\n        settings.connectionBgColor,\r\n        settings.connectionBgColorHover,\r\n        isMouseOver,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        setConnection(getConnection(\r\n            pointers,\r\n            svg.radius,\r\n            svg.cx,\r\n            svg.cy,\r\n            svg.startAngleDeg,\r\n            svg.endAngleDeg\r\n        ));\r\n    }, [\r\n        pointers,\r\n        svg.radius,\r\n        svg.cx,\r\n        svg.cy,\r\n        svg.startAngleDeg,\r\n        svg.endAngleDeg\r\n    ]);\r\n\r\n    const onClick = (evt: ReactMouseEvent) => {\r\n\r\n        if(!$svg || settings.disabled || (animation && animation.isAnimating())) return;\r\n\r\n        const degrees = getAngleByMouse(\r\n            $svg,\r\n            evt.clientX,\r\n            evt.clientY,\r\n            svg.cx,\r\n            svg.cy,\r\n            svg.radius,\r\n            svg.radius\r\n        );\r\n\r\n        const closestPointer = getClosestPointer(\r\n            pointers.pointers,\r\n            degrees,\r\n            svg.cx,\r\n            svg.cy,\r\n            svg.radius\r\n        );\r\n\r\n        if(!closestPointer) return;\r\n\r\n        if(settings.animateOnClick) {\r\n            animationClosestPointer.current = closestPointer;\r\n            animationSourceDegrees.current = closestPointer.angleDeg;\r\n            animationTargetDegrees.current = degrees;\r\n            animation?.start();\r\n        }\r\n        else{\r\n            setPointer(closestPointer, degrees);\r\n        }\r\n    };\r\n\r\n    // RANGE DRAGGING -------------------------------------------\r\n\r\n    const onValueChange = useCallback((evt: MouseEvent | ReactMouseEvent) => {\r\n        if(!$svg || settings.disabled || !settings.rangeDragging) return;\r\n\r\n        const minMaxResult = getMinMaxDistancePointers(pointers.pointers, svg.startAngleDeg);\r\n        if(!minMaxResult) return;\r\n\r\n        const [ minPointer, maxPointer ] = minMaxResult;\r\n\r\n        const mouseDegrees = getAngleByMouse(\r\n            $svg,\r\n            evt.clientX,\r\n            evt.clientY,\r\n            svg.cx,\r\n            svg.cy,\r\n            svg.radius,\r\n            svg.radius\r\n        );\r\n\r\n        if(rangeDraggingLastAngle.current === undefined) {\r\n            rangeDraggingLastAngle.current = mouseDegrees;\r\n            return;\r\n        }\r\n\r\n        const diff = (mouseDegrees - rangeDraggingLastAngle.current);\r\n        if(diff === 0 || Math.abs(diff) < data.stepAngleDeg) return;\r\n\r\n        setPointer(minPointer, mod(minPointer.angleDeg + diff, 360));\r\n        setPointer(maxPointer, mod(maxPointer.angleDeg + diff, 360));\r\n\r\n        rangeDraggingLastAngle.current = mouseDegrees;\r\n    }, [\r\n        $svg,\r\n        svg.cx,\r\n        svg.cy,\r\n        svg.radius,\r\n        data.stepAngleDeg,\r\n        pointers.pointers,\r\n        setPointer,\r\n        settings.disabled,\r\n        settings.rangeDragging,\r\n        svg.startAngleDeg,\r\n    ]);\r\n\r\n    const onMouseUp = () => {\r\n        window.removeEventListener('mousemove', onValueChange);\r\n        window.removeEventListener('mouseup', onValueChange);\r\n\r\n        rangeDraggingLastAngle.current = undefined;\r\n\r\n        if (typeof settings.onClickUp === 'function') {\r\n            settings.onClickUp();\r\n        } else {\r\n            console.log('onClickUp is not a function');\r\n            console.log(settings);\r\n        }\r\n    };\r\n\r\n    const onMouseDown = (evt: ReactMouseEvent) => {\r\n        if(!settings.rangeDragging || settings.disabled || pointers.pointers.length <= 1) return;\r\n\r\n        onValueChange(evt);\r\n\r\n        window.addEventListener('mousemove', onValueChange);\r\n        window.addEventListener('mouseup', onMouseUp);\r\n    };\r\n\r\n    // ANIMATE ON CLICK -------------------------------------------\r\n    useEffect(() => {\r\n        if(animation) {\r\n            animation.stop();\r\n        }\r\n\r\n        if(!settings.animateOnClick) {\r\n            setAnimation(null);\r\n            return;\r\n        }\r\n\r\n        const _animation = animate({\r\n            callback: (progress) => {\r\n                if(!animationClosestPointer.current) return;\r\n                const currentDegrees = getAnimationProgressAngle(\r\n                    progress,\r\n                    animationSourceDegrees.current,\r\n                    animationTargetDegrees.current,\r\n                    svg.startAngleDeg\r\n                );\r\n                setPointer(animationClosestPointer.current, currentDegrees);\r\n            },\r\n            duration: getNumber(settings.animationDuration, DEFAULT_ANIMATION_DURATION),\r\n        });\r\n\r\n        setAnimation(_animation);\r\n\r\n    },\r\n        // eslint-disable-next-line\r\n        [\r\n        settings.animateOnClick,\r\n        settings.animationDuration,\r\n    ]);\r\n\r\n    const onMouseOver = () => {\r\n        setIsMouseOver(true);\r\n    };\r\n\r\n    const onMouseOut = () => {\r\n        setIsMouseOver(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {\r\n                !getBoolean(settings.hideConnection, false) && connection &&\r\n                <circle\r\n                    data-type=\"connection\"\r\n                    className=\"mz-round-slider-connection\"\r\n\r\n                    cx={ connection.cx }\r\n                    cy={ connection.cy }\r\n                    r={ connection.radius }\r\n\r\n                    strokeDasharray={ connection.strokeDasharray.join(' ') }\r\n                    strokeDashoffset={ connection.strokeOffset }\r\n                    stroke={ stroke }\r\n                    strokeWidth={ svg.thickness + 1 }\r\n\r\n                    fill=\"none\"\r\n                    shapeRendering=\"geometricPrecision\"\r\n                    strokeLinecap=\"round\"\r\n                    cursor={ settings.disabled ? 'default' : 'pointer' }\r\n\r\n                    onClick={ onClick }\r\n                    onMouseDown={ onMouseDown }\r\n                    onMouseOver={ onMouseOver }\r\n                    onMouseOut={ onMouseOut }\r\n\r\n                    style={{\r\n                        transition: '0.2s stroke',\r\n                    }}\r\n                />\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Connection;", "import { IPointers } from './pointers-provider';\r\nimport { getAnglesDistance } from './circle-provider';\r\n\r\nexport interface IConnection {\r\n    radius: number;\r\n    cx: number;\r\n    cy: number;\r\n\r\n    // calculated properties ---------\r\n    startAngleDeg: number;\r\n    endAngleDeg: number;\r\n    strokeDasharray: number[];\r\n    strokeOffset: number;\r\n}\r\n\r\nexport const getConnection = (\r\n    pointers: IPointers,\r\n    radius: number,\r\n    cx: number,\r\n    cy: number,\r\n    pathStartAngle: number,\r\n    pathEndAngle: number,\r\n) : IConnection => {\r\n\r\n    if(!pointers.pointers || pointers.pointers.length <= 0) return null;\r\n\r\n    const result : IConnection = {\r\n        radius,\r\n        cx,\r\n        cy,\r\n\r\n        // calculated properties ---------\r\n        startAngleDeg: pathStartAngle,\r\n        endAngleDeg: pathStartAngle,\r\n        strokeDasharray: [0, 0],\r\n        strokeOffset: 0,\r\n    };\r\n\r\n    // Define start/end angles.\r\n    if(pointers.pointers.length === 1) {\r\n        result.startAngleDeg = pathStartAngle;\r\n        result.endAngleDeg = pointers.pointers[0].angleDeg;\r\n    }\r\n    else{\r\n        result.startAngleDeg = pointers.pointers[0].angleDeg;\r\n        result.endAngleDeg = pointers.pointers[pointers.pointers.length - 1].angleDeg;\r\n\r\n        /*const minMaxResult = getMinMaxDistancePointers(pointers.pointers, pathStartAngle);\r\n        if(!minMaxResult) return null;\r\n\r\n        const [ minPointer, maxPointer ] = minMaxResult;\r\n\r\n        result.startAngleDeg = minPointer.angleDeg;\r\n        result.endAngleDeg = maxPointer.angleDeg;*/\r\n    }\r\n\r\n    const pathAnglesDistance = getAnglesDistance(pathStartAngle, pathEndAngle);\r\n\r\n    if(result.startAngleDeg > result.endAngleDeg) {\r\n        result.endAngleDeg += 360;\r\n    }\r\n\r\n    let angleDistance = getAnglesDistance(result.startAngleDeg, result.endAngleDeg);\r\n\r\n    const shouldSwitch = angleDistance > pathAnglesDistance;\r\n\r\n    if(shouldSwitch) {\r\n        angleDistance = 360 - angleDistance;\r\n        [result.startAngleDeg, result.endAngleDeg] = [result.endAngleDeg, result.startAngleDeg];\r\n    }\r\n\r\n    const circumference = 2 * Math.PI * radius;\r\n    const strokeOffset = -(result.startAngleDeg / 360) * circumference;\r\n    const strokeDasharray = (angleDistance / 360) * circumference;\r\n    const complement = circumference - strokeDasharray;\r\n\r\n    result.strokeDasharray = [ strokeDasharray, complement ];\r\n    result.strokeOffset = strokeOffset;\r\n\r\n    return result;\r\n};", "import { IAnimationResult, mod } from 'mz-math';\r\n\r\nexport const getAnimationProgressAngle = (\r\n    progress: IAnimationResult,\r\n    animationSourceDegrees: number,\r\n    animationTargetDegrees: number,\r\n    startPathAngleDeg: number\r\n) => {\r\n    let percent = progress.getPercent();\r\n\r\n    if(percent < 0) {\r\n        percent = 0;\r\n    }\r\n\r\n    if(percent > 100) {\r\n        percent = 100;\r\n    }\r\n\r\n    let angle1 = animationSourceDegrees % 360;\r\n    let angle2 = animationTargetDegrees % 360;\r\n\r\n    if(angle1 < startPathAngleDeg) {\r\n        angle1 += 360;\r\n    }\r\n\r\n    if(angle2 < startPathAngleDeg) {\r\n        angle2 += 360;\r\n    }\r\n\r\n    const isClockwise = angle2 > angle1;\r\n\r\n    if(isClockwise) {\r\n        const clockwiseDistance = (angle2 - angle1 + 360) % 360;\r\n        return mod(animationSourceDegrees + (percent * clockwiseDistance / 100), 360);\r\n    }\r\n    else {\r\n        const counterclockwiseDistance = (angle1 - angle2 + 360) % 360;\r\n        return mod(animationSourceDegrees - (percent * counterclockwiseDistance / 100), 360);\r\n    }\r\n};", "import { ISettings } from '../domain/settings-provider';\r\nimport { angle2value, IPointers } from '../domain/pointers-provider';\r\nimport { getBoolean, getNumber, getString } from '../domain/common-provider';\r\nimport {\r\n    DEFAULT_TEXT_COLOR,\r\n    DEFAULT_TEXT_FONT_SIZE\r\n} from '../domain/defaults-provider';\r\nimport { useEffect, useState } from 'react';\r\nimport { ISvg } from '../domain/svg-provider';\r\nimport { IData } from '../domain/data-provider';\r\n\r\ninterface ITextProps {\r\n    settings: ISettings;\r\n    pointers: IPointers;\r\n    svg: ISvg;\r\n    data: IData;\r\n}\r\n\r\nconst Text = (props: ITextProps) => {\r\n\r\n    const { settings, pointers, svg, data } = props;\r\n\r\n    const { cx, cy } = svg;\r\n    const [ value, setValue ] = useState('');\r\n\r\n    useEffect(() => {\r\n\r\n        const values = pointers.pointers.map(pointer => angle2value(\r\n            data,\r\n            pointer.angleDeg,\r\n            svg.startAngleDeg,\r\n            svg.endAngleDeg\r\n        ));\r\n\r\n        values.sort((value1, value2) => {\r\n            return value1.toString().localeCompare(\r\n                value2.toString(),\r\n                'en',\r\n                { numeric: true }\r\n            );\r\n        });\r\n\r\n        const texts = values.map(value => `${ settings.textPrefix || '' }${ value }${ settings.textSuffix || '' }`);\r\n\r\n        const textBetween = getString(settings.textBetween, ' ');\r\n        setValue(texts.join(textBetween));\r\n\r\n    }, [\r\n        data,\r\n        pointers.pointers,\r\n        svg.startAngleDeg,\r\n        svg.endAngleDeg,\r\n        settings.textPrefix,\r\n        settings.textSuffix,\r\n        settings.textBetween,\r\n    ]);\r\n\r\n    const hideText = getBoolean(settings.hideText, false);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                !hideText &&\r\n                <text\r\n                    data-type=\"text\"\r\n                    className=\"mz-round-slider-text\"\r\n\r\n                    x={ cx + getNumber(settings.textOffsetX, 0) }\r\n                    y={ cy + getNumber(settings.textOffsetY, 0) }\r\n\r\n                    fill={ getString(settings.textColor, DEFAULT_TEXT_COLOR) }\r\n                    fontSize={ getNumber(settings.textFontSize, DEFAULT_TEXT_FONT_SIZE) }\r\n                    fontFamily={ settings.textFontFamily }\r\n\r\n                    style={{\r\n                        userSelect: 'none',\r\n                        whiteSpace: 'pre',\r\n                    }}\r\n\r\n                    textAnchor=\"middle\">\r\n\r\n                    { value }\r\n\r\n                </text>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Text;", "import { useEffect, useState, Fragment } from 'react';\r\nimport { getTicks, getTicksSettings, ITick, ITicks } from '../domain/ticks-provider';\r\nimport { ISettings } from '../domain/settings-provider';\r\nimport { ISvg } from '../domain/svg-provider';\r\nimport { IData } from '../domain/data-provider';\r\n\r\ninterface ITicksProps {\r\n    settings: ISettings;\r\n    svg: ISvg;\r\n    data: IData;\r\n}\r\n\r\nconst Ticks = (props: ITicksProps) => {\r\n\r\n    const { settings, svg, data } = props;\r\n\r\n    const [ ticksSettings, setTicksSettings ] = useState<ITicks|null>(null);\r\n    const [ ticks, setTicks ] = useState<ITick[]>([]);\r\n\r\n    useEffect(() => {\r\n       setTicksSettings(getTicksSettings(settings, data));\r\n    }, [\r\n        settings,\r\n        data,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        if(!ticksSettings) return;\r\n\r\n        let endAngleDeg = svg.endAngleDeg;\r\n        if(endAngleDeg < svg.startAngleDeg) {\r\n            endAngleDeg += 360;\r\n        }\r\n\r\n        setTicks(getTicks(\r\n            ticksSettings,\r\n            ticksSettings.ticksCount,\r\n            svg.startAngleDeg,\r\n            endAngleDeg,\r\n            svg,\r\n            data\r\n        ));\r\n    }, [\r\n        data,\r\n        svg,\r\n        ticksSettings,\r\n    ]);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                ticksSettings && ticksSettings.enableTicks &&\r\n                <g>\r\n                    {\r\n                        ticks.map((tick, i) => {\r\n                            const { x, y, x1, y1, textX, textY, showText } = tick;\r\n\r\n                            return (\r\n                                <Fragment key={ i }>\r\n                                    <line\r\n                                        x1={ x }\r\n                                        y1={ y }\r\n                                        x2={ x1 }\r\n                                        y2={ y1 }\r\n                                        strokeWidth={ ticksSettings.ticksWidth }\r\n                                        stroke={ ticksSettings.ticksColor }\r\n\r\n                                        data-type=\"tick\"\r\n                                        className=\"mz-round-slider-tick\"\r\n                                    />\r\n\r\n                                    {\r\n                                        showText &&\r\n                                        <text\r\n                                            data-type=\"tick-text\"\r\n                                            className=\"mz-round-slider-tick-text\"\r\n\r\n                                            x={ textX }\r\n                                            y={ textY }\r\n                                            textAnchor=\"middle\"\r\n                                            dominantBaseline=\"middle\"\r\n                                            fill={ ticksSettings.tickValuesColor }\r\n                                            fontSize={ ticksSettings.tickValuesFontSize }\r\n                                            fontFamily={ settings.tickValuesFontFamily }\r\n                                            style={{\r\n                                                userSelect: 'none',\r\n                                                whiteSpace: 'pre',\r\n                                            }}>\r\n                                            { settings.tickValuesPrefix }{ tick.tickValue }{ settings.tickValuesSuffix }\r\n                                        </text>\r\n                                    }\r\n                                </Fragment>\r\n                            );\r\n                        })\r\n                    }\r\n                </g>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Ticks;", "import {\r\n    circleMovement,\r\n    convertRange,\r\n    degreesToRadians,\r\n    setDecimalPlaces,\r\n    v2MulScalar,\r\n    v2Normalize\r\n} from 'mz-math';\r\nimport { ISvg } from './svg-provider';\r\nimport { IData } from './data-provider';\r\nimport { ISettings } from './settings-provider';\r\nimport { getBoolean, getNumber, getString } from './common-provider';\r\nimport {\r\n    DEFAULT_TICKS_COLOR, DEFAULT_TICKS_ENABLED, DEFAULT_TICKS_GROUP_SIZE,\r\n    DEFAULT_TICKS_HEIGHT, DEFAULT_TICKS_VALUES_COLOR,\r\n    DEFAULT_TICKS_VALUES_DISTANCE, DEFAULT_TICKS_VALUES_FONT_SIZE,\r\n    DEFAULT_TICKS_WIDTH\r\n} from './defaults-provider';\r\n\r\nexport interface ITicks {\r\n    ticksCount: number;\r\n    enableTicks: boolean;\r\n    ticksWidth: number;\r\n    ticksHeight: number;\r\n    longerTicksHeight: number;\r\n    ticksDistanceToPanel: number;\r\n    tickValuesDistance: number;\r\n    ticksColor: string;\r\n    tickValuesColor: string;\r\n    tickValuesFontSize: number;\r\n    ticksGroupSize: number;\r\n    longerTickValuesOnly: boolean;\r\n    showTickValues: boolean;\r\n}\r\n\r\nexport interface ITick {\r\n    x: number;\r\n    y: number;\r\n    x1: number;\r\n    y1: number;\r\n    textX: number;\r\n    textY: number;\r\n    isLonger: boolean;\r\n    showText: boolean;\r\n    tickValue?: string;\r\n}\r\n\r\nexport const getTicksSettings = (settings: ISettings, data: IData) : ITicks => {\r\n\r\n    let ticksCount = getNumber(settings.ticksCount, 0);\r\n    if(!ticksCount) {\r\n        if(data.data && data.data.length > 0) {\r\n            ticksCount = data.data.length;\r\n        }\r\n        else{\r\n            ticksCount = data.max;\r\n        }\r\n    }\r\n\r\n    const ticksHeight = getNumber(settings.ticksHeight, DEFAULT_TICKS_HEIGHT);\r\n\r\n    return {\r\n        ticksCount,\r\n        enableTicks: getBoolean(settings.enableTicks, DEFAULT_TICKS_ENABLED),\r\n        ticksWidth: getNumber(settings.ticksWidth, DEFAULT_TICKS_WIDTH),\r\n        ticksHeight,\r\n        longerTicksHeight: getNumber(settings.longerTicksHeight, ticksHeight * 2),\r\n        ticksDistanceToPanel: getNumber(settings.ticksDistanceToPanel, 0),\r\n        tickValuesDistance: getNumber(settings.tickValuesDistance, DEFAULT_TICKS_VALUES_DISTANCE),\r\n        ticksColor: getString(settings.ticksColor, DEFAULT_TICKS_COLOR),\r\n        tickValuesColor: getString(settings.tickValuesColor, DEFAULT_TICKS_VALUES_COLOR),\r\n        tickValuesFontSize: getNumber(settings.tickValuesFontSize, DEFAULT_TICKS_VALUES_FONT_SIZE),\r\n        ticksGroupSize: getNumber(settings.ticksGroupSize, DEFAULT_TICKS_GROUP_SIZE),\r\n        longerTickValuesOnly: getBoolean(settings.longerTickValuesOnly, true),\r\n        showTickValues: getBoolean(settings.showTickValues, true),\r\n    };\r\n};\r\n\r\nexport const getTicks = (\r\n    ticksSettings: ITicks,\r\n    ticksCount: number,\r\n    pathStartAngle: number,\r\n    pathEndAngle: number,\r\n    svg: ISvg,\r\n    data: IData\r\n) : ITick[] => {\r\n\r\n    const ticks: ITick[] = [];\r\n\r\n    const deltaAngle = Math.abs(pathEndAngle - pathStartAngle);\r\n    const oneTickAngleSize = ticksCount === 0 ? 0 : deltaAngle / ticksCount;\r\n\r\n    let count = ticksCount;\r\n    if(!data.isClosedShape) {\r\n        count++;\r\n    }\r\n\r\n    for(let i=0; i<count; i++) {\r\n        const currentAngle = pathStartAngle + i * oneTickAngleSize;\r\n        const angleRad = convertRange(degreesToRadians(currentAngle), 0, Math.PI * 2, 0, Math.PI); // [0, Math.PI*2] ---> [0, Math.PI]\r\n\r\n        let [x, y] = circleMovement([svg.cx, svg.cy], angleRad, svg.radius);\r\n\r\n        const isLonger = ticksSettings.ticksGroupSize !== undefined && (i % ticksSettings.ticksGroupSize === 0 );\r\n\r\n        let desiredDistance = ticksSettings.ticksHeight;\r\n\r\n        if(isLonger) {\r\n            desiredDistance = ticksSettings.longerTicksHeight;\r\n        }\r\n\r\n        const normalizedDirectionVector = v2Normalize([svg.cx - x, svg.cy - y]);\r\n        const tickEndVector = v2MulScalar(normalizedDirectionVector, desiredDistance);\r\n\r\n        const tickStartVector = v2MulScalar(normalizedDirectionVector, ticksSettings.ticksDistanceToPanel + svg.thickness/2);\r\n        x += tickStartVector[0];\r\n        y += tickStartVector[1];\r\n\r\n        const x1 = x + tickEndVector[0];\r\n        const y1 = y + tickEndVector[1];\r\n\r\n        // ------- Define tick value. ---------------------\r\n        let tickValue: string|undefined = undefined;\r\n        if(ticksSettings.showTickValues && (!ticksSettings.longerTickValuesOnly || ticksSettings.longerTickValuesOnly && (isLonger || ticksSettings.ticksGroupSize === undefined))) {\r\n\r\n            let value: string|number = convertRange(i, 0, ticksCount, data.min, data.max);\r\n\r\n            if(data.data.length > 0) {\r\n                const index = Math.round(value);\r\n                value = data.data[index];\r\n            }\r\n            else{\r\n                value = setDecimalPlaces(value, data.round);\r\n            }\r\n\r\n            tickValue = (value ?? '').toString();\r\n        }\r\n\r\n        let textX = 0;\r\n        let textY = 0;\r\n        const showText = tickValue !== undefined;\r\n\r\n        if(showText) {\r\n            const _tickValuesDistance = getNumber(desiredDistance + ticksSettings.tickValuesDistance, desiredDistance * 1.5);\r\n            const tickTextVector = v2MulScalar(normalizedDirectionVector, _tickValuesDistance);\r\n            textX = x + tickTextVector[0];\r\n            textY = y + tickTextVector[1];\r\n        }\r\n\r\n        ticks.push({\r\n            x,\r\n            y,\r\n            x1,\r\n            y1,\r\n            textX,\r\n            textY,\r\n            isLonger,\r\n            tickValue,\r\n            showText,\r\n        });\r\n    }\r\n\r\n    return ticks;\r\n};", "import { useEffect, useState, MouseEvent, useRef } from 'react';\r\nimport { getCircle, ICircle } from '../domain/circle-provider';\r\nimport { getNumber, getString } from '../domain/common-provider';\r\nimport { ISettings } from '../domain/settings-provider';\r\nimport {\r\n    DEFAULT_ANIMATION_DURATION,\r\n    DEFAULT_PATH_BG_COLOR,\r\n    DEFAULT_PATH_BORDER_COLOR,\r\n} from '../domain/defaults-provider';\r\nimport { ISvg } from '../domain/svg-provider';\r\nimport { getAngleByMouse, getClosestPointer, IPointer, IPointers } from '../domain/pointers-provider';\r\nimport { animate, IAnimationResult, newId } from 'mz-math';\r\nimport { getAnimationProgressAngle } from '../domain/animation-provider';\r\nimport InnerCircle from './InnerCircle';\r\n\r\ninterface ICircleProps {\r\n    settings: ISettings;\r\n    pointers: IPointers;\r\n    svg: ISvg;\r\n    $svg: SVGSVGElement;\r\n    setPointer: (pointer: IPointer, newAngleDeg: number) => void;\r\n}\r\n\r\nconst Circle = (props: ICircleProps) => {\r\n\r\n    const { settings, pointers, $svg, svg, setPointer } = props;\r\n\r\n    const [ animation, setAnimation ] = useState<IAnimationResult|null>(null);\r\n    const [ maskId ] = useState(newId());\r\n    const [ circle, setCircle ] = useState<ICircle>({\r\n        strokeDasharray: '0 1000000',\r\n        strokeOffset: 0,\r\n    });\r\n\r\n    const animationClosestPointer = useRef<IPointer|null>(null);\r\n    const animationSourceDegrees = useRef(0);\r\n    const animationTargetDegrees = useRef(0);\r\n\r\n    useEffect(() => {\r\n        setCircle(getCircle(\r\n            svg.startAngleDeg,\r\n            svg.endAngleDeg,\r\n            svg.radius\r\n        ));\r\n    }, [\r\n        svg.startAngleDeg,\r\n        svg.endAngleDeg,\r\n        svg.radius,\r\n    ]);\r\n\r\n    const onClick = (evt: MouseEvent) => {\r\n        if(!$svg || settings.disabled || (animation && animation.isAnimating())) return;\r\n\r\n        const degrees = getAngleByMouse(\r\n            $svg,\r\n            evt.clientX,\r\n            evt.clientY,\r\n            svg.cx,\r\n            svg.cy,\r\n            svg.radius,\r\n            svg.radius\r\n        );\r\n\r\n        const closestPointer = getClosestPointer(\r\n            pointers.pointers,\r\n            degrees,\r\n            svg.cx,\r\n            svg.cy,\r\n            svg.radius\r\n        );\r\n\r\n        if(!closestPointer) return;\r\n\r\n        if(settings.animateOnClick) {\r\n            animationClosestPointer.current = closestPointer;\r\n            animationSourceDegrees.current = closestPointer.angleDeg;\r\n            animationTargetDegrees.current = degrees;\r\n            animation?.start();\r\n        }\r\n        else{\r\n            setPointer(closestPointer, degrees);\r\n        }\r\n    };\r\n\r\n    // ANIMATE ON CLICK -------------------------------------------\r\n    useEffect(() => {\r\n        if(animation) {\r\n            animation.stop();\r\n        }\r\n\r\n        if(!settings.animateOnClick) {\r\n            setAnimation(null);\r\n            return;\r\n        }\r\n\r\n        const _animation = animate({\r\n            callback: (progress) => {\r\n                if(!animationClosestPointer.current) return;\r\n                const currentDegrees = getAnimationProgressAngle(\r\n                    progress,\r\n                    animationSourceDegrees.current,\r\n                    animationTargetDegrees.current,\r\n                    svg.startAngleDeg\r\n                );\r\n                setPointer(animationClosestPointer.current, currentDegrees);\r\n            },\r\n            duration: getNumber(settings.animationDuration, DEFAULT_ANIMATION_DURATION),\r\n        });\r\n\r\n        setAnimation(_animation);\r\n    },\r\n        // eslint-disable-next-line\r\n        [\r\n        settings.animateOnClick,\r\n        settings.animationDuration,\r\n    ]);\r\n\r\n    return (\r\n        <g onClick={ onClick }>\r\n\r\n            {\r\n                settings.pathInnerBgColor &&\r\n                <InnerCircle\r\n                    maskId={ maskId }\r\n                    settings={ settings }\r\n                    svg={ svg }\r\n                    circle={ circle }\r\n                />\r\n            }\r\n\r\n            {\r\n                svg.border > 0 &&\r\n                <circle\r\n                    strokeDasharray={ circle.strokeDasharray }\r\n                    strokeDashoffset={ circle.strokeOffset }\r\n                    cx={ svg.cx }\r\n                    cy={ svg.cy }\r\n                    r={ svg.radius }\r\n                    stroke={ getString(settings.pathBorderColor, DEFAULT_PATH_BORDER_COLOR) }\r\n                    strokeWidth={ svg.thickness + svg.border * 2 }\r\n                    fill=\"none\"\r\n                    shapeRendering=\"geometricPrecision\"\r\n                    strokeLinecap=\"round\"\r\n                    cursor=\"pointer\"\r\n                    data-type=\"path-border\"\r\n                    className=\"mz-round-slider-path-border\"\r\n                />\r\n            }\r\n\r\n            <circle\r\n                strokeDasharray={ circle.strokeDasharray }\r\n                strokeDashoffset={ circle.strokeOffset }\r\n                cx={ svg.cx }\r\n                cy={ svg.cy }\r\n                r={ svg.radius }\r\n                stroke={ getString(settings.pathBgColor, DEFAULT_PATH_BG_COLOR) }\r\n                strokeWidth={ svg.thickness }\r\n                fill=\"none\"\r\n                shapeRendering=\"geometricPrecision\"\r\n                strokeLinecap=\"round\"\r\n                cursor=\"pointer\"\r\n                data-type=\"path\"\r\n                className=\"mz-round-slider-path\"\r\n            />\r\n        </g>\r\n    )\r\n};\r\n\r\nexport default Circle;\r\n", "import { ISvg } from '../domain/svg-provider';\r\nimport { ISettings } from '../domain/settings-provider';\r\nimport { ICircle } from '../domain/circle-provider';\r\nimport { useEffect, useState } from 'react';\r\nimport { circleMovement, convertRange, degreesToRadians, mod, Vector2 } from 'mz-math';\r\nimport { getBoolean } from '../domain/common-provider';\r\n\r\ninterface IInnerCircleProps {\r\n    maskId: string;\r\n    settings: ISettings;\r\n    svg: ISvg;\r\n    circle: ICircle;\r\n}\r\n\r\nconst InnerCircle = (props: IInnerCircleProps) => {\r\n\r\n    const { svg, maskId, settings, circle } = props;\r\n\r\n    const [ startPoint, setStartPoint ] = useState<Vector2>([0, 0]);\r\n    const [ endPoint, setEndPoint ] = useState<Vector2>([0, 0]);\r\n    const [ largeArcFlag, setLargeArcFlag ] = useState(0);\r\n    const [ pathInnerBgFull, setPathInnerBgFull] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if(mod(svg.startAngleDeg, 360) === mod(svg.endAngleDeg, 360)) {\r\n            setPathInnerBgFull(true);\r\n            return;\r\n        }\r\n\r\n        setPathInnerBgFull(getBoolean(settings.pathInnerBgFull, false));\r\n    }, [\r\n        settings.pathInnerBgFull,\r\n        svg.startAngleDeg,\r\n        svg.endAngleDeg,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        const startAngleDeg = convertRange(svg.startAngleDeg, 0, Math.PI*2, 0, Math.PI);\r\n        setStartPoint(circleMovement([svg.cx, svg.cy], degreesToRadians(startAngleDeg), svg.radius));\r\n\r\n        const endAngleDeg = convertRange(svg.endAngleDeg, 0, Math.PI*2, 0, Math.PI);\r\n        setEndPoint(circleMovement([svg.cx, svg.cy], degreesToRadians(endAngleDeg), svg.radius));\r\n\r\n        const largeArcFlag = svg.endAngleDeg - svg.startAngleDeg <= 180 ? 1 : 0;\r\n        setLargeArcFlag(largeArcFlag);\r\n    }, [\r\n        svg.cx,\r\n        svg.cy,\r\n        svg.endAngleDeg,\r\n        svg.radius,\r\n        svg.startAngleDeg,\r\n    ]);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                !pathInnerBgFull &&\r\n                <mask id={ maskId }>\r\n                    <path\r\n                        fill=\"black\"\r\n                        d={ `M ${ startPoint[0] } ${ startPoint[1] } A ${ svg.radius } ${ svg.radius } 1 ${ largeArcFlag } 0 ${ endPoint[0] } ${ endPoint[1] }` }\r\n                    />\r\n                    <path\r\n                        fill=\"white\"\r\n                        d={ `M ${ startPoint[0] } ${ startPoint[1] } A ${ svg.radius } ${ svg.radius } 0 ${ largeArcFlag === 1 ? 0 : 1 } 1 ${ endPoint[0] } ${ endPoint[1] }` }\r\n                    />\r\n                </mask>\r\n            }\r\n\r\n            <circle\r\n                strokeDasharray={ circle.strokeDasharray }\r\n                strokeDashoffset={ circle.strokeOffset }\r\n                cx={ svg.cx }\r\n                cy={ svg.cy }\r\n                r={ svg.radius }\r\n                stroke={ 'transparent' }\r\n                strokeWidth={ svg.thickness }\r\n                fill={ settings.pathInnerBgColor }\r\n                shapeRendering=\"geometricPrecision\"\r\n                strokeLinecap=\"round\"\r\n                data-type=\"path-inner\"\r\n                className=\"mz-round-slider-path-inner\"\r\n                mask={ pathInnerBgFull ? '' : `url(#${ maskId })`}\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\nexport default InnerCircle;"],
  "mappings": "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",
  "names": ["require_react_production_min", "__commonJSMin", "exports", "l", "n", "p", "q", "r", "t", "u", "v", "w", "x", "y", "z", "A", "a", "B", "C", "D", "E", "b", "e", "F", "G", "H", "I", "J", "K", "L", "M", "d", "c", "k", "h", "g", "f", "m", "N", "O", "escape", "P", "Q", "R", "S", "T", "U", "V", "W", "require_react", "__commonJSMin", "exports", "module", "require_react_jsx_runtime_production_min", "__commonJSMin", "exports", "f", "k", "l", "m", "n", "p", "q", "c", "a", "g", "b", "d", "e", "h", "require_jsx_runtime", "__commonJSMin", "exports", "module", "import_react", "setDecimalPlaces", "num", "decimalPlaces", "coefficient", "__pow", "mod", "n", "m", "convertRange", "x", "a", "b", "c", "d", "isNumber", "value", "radiansToDegrees", "radians", "decimalPlaces", "res", "setDecimalPlaces", "degreesToRadians", "degrees", "vSub", "vector1", "vector2", "decimalPlaces", "vector", "i", "setDecimalPlaces", "v2Sub", "vMulScalar", "v", "scalar", "decimalPlaces", "vector", "i", "setDecimalPlaces", "v2MulScalar", "v2", "vLength", "vector", "decimalPlaces", "sum", "i", "setDecimalPlaces", "v2Distance", "vector1", "vector2", "decimalPlaces", "diff", "vSub", "vLength", "vNormalize", "v", "decimalPlaces", "length", "vLength", "unitVector", "i", "setDecimalPlaces", "v2Normalize", "v2", "circleMovement", "center", "angle", "radius", "newId", "animate", "props", "_duration", "startTime", "animationId", "elapsed", "previousTimeStamp", "animating", "observer", "stop", "restart", "start", "pause", "resume", "step", "timeStamp", "getResult", "observerHandler", "_entries", "_observer", "getElapsedTime", "isAnimating", "getStartTime", "getPercent", "getResizeObserver", "getSvg", "circleRadius", "circleThickness", "circleBorder", "maxPointerRadius", "startAngleDeg", "endAngleDeg", "thickness", "diff", "size", "cx", "cy", "getSVGCenter", "getSVGSize", "val", "s", "DEFAULT_PATH_BG_COLOR", "DEFAULT_PATH_BORDER_COLOR", "DEFAULT_POINTER_BG_COLOR", "DEFAULT_POINTER_BG_COLOR_SELECTED", "DEFAULT_POINTER_BG_COLOR_DISABLED", "DEFAULT_POINTER_BORDER_COLOR", "DEFAULT_CONNECTION_BG_COLOR", "DEFAULT_CONNECTION_BG_COLOR_DISABLED", "DEFAULT_TEXT_COLOR", "DEFAULT_TICKS_COLOR", "DEFAULT_TICKS_VALUES_COLOR", "getNumber", "value", "defaultValue", "H", "getString", "getBoolean", "isAngleInArc", "startAngleDeg", "endAngleDeg", "currentDegrees", "getAnglesDistance", "startAngle", "endAngle", "diff", "diffMod", "y", "getCircle", "radius", "circumference", "angleDiff", "strokeOffset", "strokeDasharray", "complement", "getAngleByMouse", "$svg", "clientX", "clientY", "cx", "cy", "rx", "ry", "left", "top", "relativeMouse", "vector", "R", "angleRad", "Mr", "angle2value", "data", "angle", "pathStartAngle", "pathEndAngle", "value", "j", "index", "s", "value2angle", "_value", "valueIndex", "item", "y", "initPointers", "settings", "angleDeg", "getNumber", "bgColor", "getString", "DEFAULT_POINTER_BG_COLOR", "bgColorSelected", "DEFAULT_POINTER_BG_COLOR_SELECTED", "bgColorDisabled", "DEFAULT_POINTER_BG_COLOR_DISABLED", "bgColorHover", "DEFAULT_POINTER_BORDER_COLOR", "pointers", "i", "settingPointer", "radius", "border", "borderColor", "disabled", "getBoolean", "angleAfterStep", "roundToStep", "getPointers", "getMaxRadius", "max", "pointer", "getClosestPointer", "currentPlaceDegrees", "pathRadius", "hr", "currentPointOnArc", "Kt", "min", "closestPointer", "enabledPointers", "p", "pointerAngleRad", "pointOnArc", "distance", "Er", "__spreadValues", "getClosestEdge", "startAngleDegrees", "endAngleDegrees", "startAngleRad", "startPointOnArc", "endAngleRad", "endPointOnArc", "distance1", "distance2", "getMinMaxDistancePointers", "minDistance", "maxDistance", "minPointer", "maxPointer", "getAnglesDistance", "step", "import_react", "outlineNoneStyle", "import_jsx_runtime", "getPointerFill", "pointer", "selectedPointerId", "bgColor", "bgColorSelected", "bgColorDisabled", "bgColorHover", "isMouseOver", "Pointer", "props", "pointerRef", "svg", "$svg", "data", "settings", "setPointer", "radius", "angleDeg", "border", "borderColor", "cx", "cy", "center", "setCenter", "value", "setValue", "fill", "setFill", "DEFAULT_POINTER_BG_COLOR", "setIsMouseOver", "angle2value", "angleRad", "j", "hr", "pointerCenter", "Kt", "onValueChange", "evt", "mouseX", "mouseY", "degrees", "getAngleByMouse", "newAngleDeg", "isAngleInArc", "getClosestEdge", "onMouseUp", "onMouseDown", "onKeyDown", "$current", "onTouch", "onWheel", "scrollTop", "onMouseOver", "onMouseOut", "outlineNoneStyle", "Pointer_default", "import_jsx_runtime", "Pointers", "props", "pointers", "settings", "svg", "$svg", "data", "setPointer", "selectedPointerId", "pointer", "Pointer_default", "Pointers_default", "getData", "setting", "min", "getNumber", "max", "step", "arrowStep", "round", "data", "minIndex", "item", "maxIndex", "pathStartAngle", "pathEndAngle", "isClosedShape", "y", "stepAngleDeg", "arrowStepAngleDeg", "import_react", "getConnection", "pointers", "radius", "cx", "cy", "pathStartAngle", "pathEndAngle", "result", "pathAnglesDistance", "getAnglesDistance", "angleDistance", "circumference", "strokeOffset", "strokeDasharray", "complement", "getAnimationProgressAngle", "progress", "animationSourceDegrees", "animationTargetDegrees", "startPathAngleDeg", "percent", "angle1", "angle2", "clockwiseDistance", "y", "counterclockwiseDistance", "import_jsx_runtime", "getStroke", "disabled", "connectionBgColorDisabled", "connectionBgColor", "isMouseOver", "connectionBgColorHover", "getString", "DEFAULT_CONNECTION_BG_COLOR_DISABLED", "bgColor", "DEFAULT_CONNECTION_BG_COLOR", "Connection", "props", "settings", "pointers", "$svg", "svg", "data", "setPointer", "connection", "setConnection", "animation", "setAnimation", "stroke", "setStroke", "setIsMouseOver", "rangeDraggingLastAngle", "animationClosestPointer", "animationSourceDegrees", "animationTargetDegrees", "getConnection", "onClick", "evt", "degrees", "getAngleByMouse", "closestPointer", "getClosestPointer", "onValueChange", "minMaxResult", "getMinMaxDistancePointers", "minPointer", "maxPointer", "mouseDegrees", "diff", "y", "onMouseUp", "onMouseDown", "_animation", "Fo", "progress", "currentDegrees", "getAnimationProgressAngle", "getNumber", "onMouseOver", "onMouseOut", "getBoolean", "Connection_default", "import_react", "import_jsx_runtime", "Text", "props", "settings", "pointers", "svg", "data", "cx", "cy", "value", "setValue", "values", "pointer", "angle2value", "value1", "value2", "texts", "textBetween", "getString", "hideText", "getBoolean", "getNumber", "DEFAULT_TEXT_COLOR", "Text_default", "import_react", "getTicksSettings", "settings", "data", "ticksCount", "getNumber", "ticksHeight", "getBoolean", "getString", "DEFAULT_TICKS_COLOR", "DEFAULT_TICKS_VALUES_COLOR", "getTicks", "ticksSettings", "pathStartAngle", "pathEndAngle", "svg", "ticks", "deltaAngle", "oneTickAngleSize", "count", "i", "currentAngle", "angleRad", "j", "hr", "x", "y", "Kt", "isLonger", "desiredDistance", "normalizedDirectionVector", "E", "tickEndVector", "wr", "tickStartVector", "x1", "y1", "tickValue", "value", "index", "s", "textX", "textY", "showText", "_tickValuesDistance", "tickTextVector", "import_jsx_runtime", "Ticks", "props", "settings", "svg", "data", "ticksSettings", "setTicksSettings", "ticks", "setTicks", "getTicksSettings", "endAngleDeg", "getTicks", "tick", "i", "x", "y", "x1", "y1", "textX", "textY", "showText", "Ticks_default", "import_react", "import_react", "import_jsx_runtime", "InnerCircle", "props", "svg", "maskId", "settings", "circle", "startPoint", "setStartPoint", "endPoint", "setEndPoint", "largeArcFlag", "setLargeArcFlag", "pathInnerBgFull", "setPathInnerBgFull", "y", "getBoolean", "startAngleDeg", "j", "Kt", "hr", "endAngleDeg", "InnerCircle_default", "import_jsx_runtime", "Circle", "props", "settings", "pointers", "$svg", "svg", "setPointer", "animation", "setAnimation", "maskId", "Yo", "circle", "setCircle", "animationClosestPointer", "animationSourceDegrees", "animationTargetDegrees", "getCircle", "onClick", "evt", "degrees", "getAngleByMouse", "closestPointer", "getClosestPointer", "_animation", "Fo", "progress", "currentDegrees", "getAnimationProgressAngle", "getNumber", "InnerCircle_default", "getString", "DEFAULT_PATH_BORDER_COLOR", "DEFAULT_PATH_BG_COLOR", "Circle_default", "import_jsx_runtime", "RoundSlider", "props", "data", "setData", "svg", "setSvg", "pointers", "setPointers", "selectedPointerId", "setSelectedPointerId", "prevAngleDegRef", "svgRef", "_data", "getData", "getPointers", "pathStartAngle", "getNumber", "pathEndAngle", "getSvg", "clearSelectedPointer", "evt", "setPointersCallback", "pointer", "newAngleDeg", "roundToStep", "y", "updatePointer", "prevAngle", "nextAngle", "prevIndex", "nextIndex", "prevPointer", "nextPointer", "splitPointDeg", "t1", "t2", "clockwiseNew", "isAngleInArc", "clockwisePrev", "clockwise", "t3", "t4", "counterClockwiseNew", "counterClockwisePrev", "getClosestEdge", "angleChanged", "_a", "_pointers", "__spreadValues", "updatedData", "val", "angle2value", "updatedPointers", "$pointer", "__spreadProps", "outlineNoneStyle", "Circle_default", "Ticks_default", "Connection_default", "Pointers_default", "Text_default"]
}
